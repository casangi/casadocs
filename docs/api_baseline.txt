v6.2.0

casatasks.analysis.imcollapse(imagename, function='', axes='[0]', outfile='', box='', region='', chans='', stokes='', mask='', overwrite=False, stretch=False)
casatasks.analysis.imcontsub(imagename, linefile='', contfile='', fitorder=0, region='', box='', chans='', stokes='')
casatasks.analysis.imdev(imagename, outfile='', region='', box='', chans='', stokes='', mask='', overwrite=False, stretch=False, grid=[1, 1], anchor='ref', xlength='1pix', ylength='1pix', interp='cubic', stattype='sigma', statalg='classic', zscore=-1, maxiter=-1)
casatasks.analysis.imfit(imagename, box='', region='', chans='', stokes='', mask='', includepix=[''], excludepix=[''], residual='', model='', estimates='', logfile='', append=True, newestimates='', complist='', overwrite=False, dooff=False, offset=0.0, fixoffset=False, stretch=False, rms='-1', noisefwhm='', summary='')
casatasks.analysis.immath(imagename='', mode='evalexpr', outfile='immath_results.im', expr='IM0', varnames='', sigma='0.0mJy/beam', polithresh='', mask='', region='', box='', chans='', stokes='', stretch=False, imagemd='', prec='float')
casatasks.analysis.immoments(imagename, moments=[0], axis='spectral', region='', box='', chans='', stokes='', mask='', includepix=-1, excludepix=-1, outfile='', stretch=False)
casatasks.analysis.impv(imagename, outfile='', mode='coords', start='', end='', center='', length='', pa='', width='1', unit='arcsec', overwrite=False, region='""', chans='', stokes='', mask='', stretch=False)
casatasks.analysis.imrebin(imagename, outfile='', factor='', region='', box='', chans='', stokes='', mask='', dropdeg=False, overwrite=False, stretch=False, crop=True)
casatasks.analysis.imreframe(imagename, output='', outframe='lsrk', epoch='', restfreq='')
casatasks.analysis.imregrid(imagename, template='get', output='', asvelocity=True, axes=[-1], shape=[-1], interpolation='linear', decimate=10, replicate=False, overwrite=False)
casatasks.analysis.imsmooth(imagename, kernel='gauss', major='', minor='', pa='', targetres=False, kimage='', scale=-1.0, region='', box='', chans='', stokes='', mask='', outfile='', stretch=False, overwrite=False, beam='')
casatasks.analysis.imsubimage(imagename, outfile='', box='', region='', chans='', stokes='', mask='', dropdeg=False, overwrite=False, verbose=True, stretch=False, keepaxes=[''])
casatasks.analysis.imtrans(imagename, outfile='', order='')
casatasks.analysis.imval(imagename, region='', box='', chans='', stokes='')
casatasks.analysis.rmfit(imagename, rm='', rmerr='', pa0='', pa0err='', nturns='', chisq='', sigma=-1, rmfg=0.0, rmmax=0.0, maxpaerr=1e30)
casatasks.analysis.specfit(imagename, box='', region='', chans='', stokes='', axis=-1, mask='', ngauss=1, poly=-1, estimates='', minpts=1, multifit=False, model='', residual='', amp='', amperr='', center='', centererr='', fwhm='', fwhmerr='', integral='', integralerr='', wantreturn=True, stretch=False, logresults=True, pampest='', pcenterest='', pfwhmest='', pfix='', gmncomps=0, gmampcon='', gmcentercon='', gmfwhmcon='', gmampest=[0.0], gmcenterest=[0.0], gmfwhmest=[0.0], gmfix='', logfile='', append=True, pfunc='', goodamprange=[0.0], goodcenterrange=[0.0], goodfwhmrange=[0.0], sigma='', outsigma='')
casatasks.analysis.specflux(imagename, region='', box='', chans='', stokes='', mask='', stretch=False, function='flux density', unit='km/s', major='', minor='', logfile='', overwrite=False)
casatasks.analysis.specsmooth(imagename, outfile='', box='', chans='', stokes='', region='', mask='', overwrite=False, stretch=False, axis=-1, function='hanning', width=2, dmethod='copy')
casatasks.analysis.spxfit(imagename='', box='', region='', chans='', stokes='', axis=-1, mask='', minpts=1, multifit=False, spxtype='plp', spxest=[''], spxfix=[''], div='0', spxsol='', spxerr='', model='', residual='', wantreturn=True, stretch=False, logresults=True, logfile='', append=True, sigma='', outsigma='')
casatasks.calibration.accor(vis, caltable='', field='', spw='', intent='', selectdata=True, timerange='', antenna='', scan='', observation='', msselect='', solint='inf', combine='', corrdepflags=False, append=False, docallib=False, callib='', gaintable=[''], gainfield=[''], interp=[''], spwmap=[''])
casatasks.calibration.applycal(vis, field='', spw='', intent='', selectdata=True, timerange='', uvrange='', antenna='', scan='', observation='', msselect='', docallib=False, callib='', gaintable=[''], gainfield=[''], interp=[''], spwmap=[''], calwt=[True], parang=False, applymode='', flagbackup=True)
casatasks.calibration.bandpass(vis, caltable='', field='', spw='', intent='', selectdata=True, timerange='', uvrange='', antenna='', scan='', observation='', msselect='', solint='inf', combine='scan', refant='', minblperant=4, minsnr=3.0, solnorm=False, bandtype='B', smodel=[''], corrdepflags=False, append=False, fillgaps=0, degamp=3, degphase=3, visnorm=False, maskcenter=0, maskedge=5, docallib=False, callib='', gaintable=[''], gainfield=[''], interp=[''], spwmap=[''], parang=False)
casatasks.calibration.blcal(vis, caltable='', field='', spw='', intent='', selectdata=True, timerange='', uvrange='', antenna='', scan='', observation='', msselect='', solint='inf', combine='scan', freqdep=False, calmode='ap', solnorm=False, gaintable=[''], gainfield=[''], interp=[''], spwmap=[''], parang=False)
casatasks.calibration.clearcal(vis, field='', spw='', intent='', addmodel=False)
casatasks.calibration.fluxscale(vis, caltable='', fluxtable='', reference=[''], transfer=[''], listfile='', append=False, refspwmap=[-1], gainthreshold=-1.0, antenna='', timerange='', scan='', incremental=False, fitorder=1, display=False)
casatasks.calibration.fringefit(vis, caltable='', field='', spw='', intent='', selectdata=True, timerange='', antenna='', scan='', observation='', msselect='', solint='inf', combine='', refant='', minsnr=3.0, zerorates=False, globalsolve=True, niter=100, delaywindow=[''], ratewindow=[''], append=False, corrdepflags=False, docallib=False, callib='', gaintable=[''], gainfield=[''], interp=[''], spwmap=[''], paramactive=[''], parang=False)
casatasks.calibration.gaincal(vis, caltable='', field='', spw='', intent='', selectdata=True, timerange='', uvrange='', antenna='', scan='', observation='', msselect='', solint='inf', combine='', preavg=-1.0, refant='', refantmode='flex', minblperant=4, minsnr=3.0, solnorm=False, normtype='mean', gaintype='G', smodel=[''], calmode='ap', solmode='', rmsthresh=[''], corrdepflags=False, append=False, splinetime=3600.0, npointaver=3, phasewrap=180.0, docallib=False, callib='', gaintable=[''], gainfield=[''], interp=[''], spwmap=[''], parang=False)
casatasks.calibration.gencal(vis, caltable='', caltype='', infile='', spw='', antenna='', pol='', parameter=[''], uniform=True)
casatasks.calibration.initweights(vis, wtmode='nyq', tsystable='', gainfield='', interp='', spwmap=[''], dowtsp=False)
casatasks.calibration.polcal(vis, caltable='', field='', spw='', intent='', selectdata=True, timerange='', uvrange='', antenna='', scan='', observation='', msselect='', solint='inf', combine='obs,scan', preavg=300.0, refant='', minblperant=4, minsnr=3.0, poltype='D+QU', smodel=[''], append=False, docallib=False, callib='', gaintable=[''], gainfield=[''], interp=[''], spwmap=[''])
casatasks.calibration.polfromgain(vis, tablein, caltable='', paoffset=0.0)
casatasks.calibration.rerefant(vis, tablein, caltable='', refantmode='flex', refant='')
casatasks.calibration.smoothcal(vis, tablein, caltable='', field=[''], smoothtype='median', smoothtime=60.0)
casatasks.calibration.wvrgcal(vis, caltable='', toffset=0, segsource=True, sourceflag=[''], tie=[''], nsol=1, disperse=False, wvrflag=[''], statfield='', statsource='', smooth='', scale=1., spw=[''], wvrspw=[''], reversespw='', cont=False, maxdistm=500., minnumants=2, mingoodfrac=0.8, usefieldtab=False, refant=[''], offsetstable='')
casatasks.data.exportasdm(vis, asdm='', datacolumn='data', archiveid='S0', rangeid='X1', subscanduration='24h', sbduration='2700s', apcorrected=False, verbose=True, showversion=True, useversion='v3')
casatasks.data.exportfits(imagename, fitsimage='', velocity=False, optical=False, bitpix=-32, minpix=0, maxpix=-1, overwrite=False, dropstokes=False, stokeslast=True, history=True, dropdeg=False)
casatasks.data.exportuvfits(vis, fitsfile='', datacolumn='corrected', field='', spw='', antenna='', timerange='', writesyscal=False, multisource=True, combinespw=True, writestation=True, padwithflags=False, overwrite=False)
casatasks.data.importasdm(asdm, vis='', createmms=False, separationaxis='auto', numsubms='auto', corr_mode='all', srt='all', time_sampling='all', ocorr_mode='ca', compression=False, lazy=False, asis='', wvr_corrected_data='no', scans='', ignore_time=False, process_syspower=True, process_caldevice=True, process_pointing=True, process_flags=True, tbuff=0.0, applyflags=False, savecmds=False, outfile='', flagbackup=True, verbose=False, overwrite=False, showversion=False, useversion='v3', bdfflags=False, with_pointing_correction=False, convert_ephem2geo=True, polyephem_tabtimestep=0.)
casatasks.data.importatca(files=[''], vis='', options='', spw=[-1], nscans=[0,0], lowfreq=0.1, highfreq=999, fields=[''], edge=8)
casatasks.data.importfits(fitsimage, imagename='', whichrep=0, whichhdu=-1, zeroblanks=True, overwrite=False, defaultaxes=False, defaultaxesvalues='[]', beam='[]')
casatasks.data.importfitsidi(fitsidifile, vis='', constobsid=False, scanreindexgap_s=0., specframe='GEO')
casatasks.data.importgmrt(fitsfile, flagfile='', vis='')
casatasks.data.importmiriad(mirfile, vis='', tsys=False, spw=[-1], vel='', linecal=False, wide=[''], debug=0)
casatasks.data.importuvfits(fitsfile, vis='', antnamescheme='old')
casatasks.data.importvla(archivefiles, vis='', bandname='', frequencytol='150000.0Hz', project='', starttime='', stoptime='', applytsys=True, autocorr=False, antnamescheme='new', keepblanks=False, evlabands=False)
casatasks.data.splattotable(filenames, table='')
casatasks.flagging.flagcmd(vis, inpmode='table', inpfile='', tablerows=[''], reason='any', useapplied=False, tbuff=0.0, ants='', action='apply', flagbackup=True, clearall=False, rowlist=[''], plotfile='', savepars=False, outfile='', overwrite=True)
casatasks.flagging.flagdata(vis, mode='manual', autocorr=False, inpfile='', reason='any', tbuff=0.0, spw='', field='', antenna='', uvrange='', timerange='', correlation='', scan='', intent='', array='', observation='', feed='', clipminmax=[''], datacolumn='DATA', clipoutside=True, channelavg=False, chanbin=1, timeavg=False, timebin='0s', clipzeros=False, quackinterval=1.0, quackmode='beg', quackincrement=False, tolerance=0.0, addantenna='', lowerlimit=0.0, upperlimit=90.0, ntime='scan', combinescans=False, timecutoff=4.0, freqcutoff=3.0, timefit='line', freqfit='poly', maxnpieces=7, flagdimension='freqtime', usewindowstats='none', halfwin=1, extendflags=True, winsize=3, timedev='', freqdev='', timedevscale=5.0, freqdevscale=5.0, spectralmax=1E6, spectralmin=0.0, antint_ref_antenna='', minchanfrac=0.6, verbose=False, extendpols=True, growtime=50.0, growfreq=50.0, growaround=False, flagneartime=False, flagnearfreq=False, minrel=0.0, maxrel=1.0, minabs=0, maxabs=-1, spwchan=False, spwcorr=False, basecnt=False, fieldcnt=False, name='Summary', action='apply', display='', flagbackup=True, savepars=False, cmdreason='', outfile='', overwrite=True, writeflags=True)
casatasks.flagging.flagmanager(vis, mode='list', versionname='', oldname='', comment='', merge='replace')
casatasks.imaging.apparentsens(vis, field='', spw='', intent='', selectdata=True, timerange='', uvrange='', antenna='', scan='', observation='', imsize=[100], cell='"1arcsec"', stokes='I', specmode='mfs', weighting='natural', robust=0.5, npixels=0, uvtaper=[''])
casatasks.imaging.deconvolve(imagename, model='', psf=[''], alg='clark', niter=10, gain=0.1, threshold=0.0, mask='', scales=[0, 3, 10], sigma=0.0, targetflux=1.0, prior='')
casatasks.imaging.delmod(vis, otf=True, field='', scr=False)
casatasks.imaging.feather(highres, lowres, imagename='', sdfactor=1.0, effdishdiam=-1.0, lowpassfiltersd=False)
casatasks.imaging.ft(vis, field='', spw='', model='', nterms=1, reffreq='', complist='', incremental=False, usescratch=False)
casatasks.imaging.impbcor(imagename, pbimage='""', outfile='', overwrite=False, box='', region='', chans='', stokes='', mask='', mode='divide', cutoff=-1.0, stretch=False)
casatasks.imaging.makemask(mode='list', inpimage='', inpmask='', output='', overwrite=False, inpfreqs='', outfreqs='')
casatasks.imaging.predictcomp(objname='', standard='Butler-JPL-Horizons 2010', epoch='', minfreq='', maxfreq='', nfreqs=2, prefix='', antennalist='', showplot=False, savefig='', symb='.', include0amp=False, include0bl=False, blunit='', showbl0flux=False)
casatasks.imaging.sdintimaging(vis, usedata='sdint', sdimage='', sdpsf='', sdgain=1.0, dishdia=100.0, selectdata=True, field='', spw='', timerange='', uvrange='', antenna='', scan='', observation='', intent='', datacolumn='corrected', imagename='', imsize=100, cell='"1arcsec"', phasecenter='', stokes='I', projection='SIN', startmodel='', specmode='mfs', reffreq='', nchan=-1, start='', width='', outframe='LSRK', veltype='radio', restfreq=[''], interpolation='linear', perchanweightdensity=True, gridder='standard', facets=1, psfphasecenter='', wprojplanes=1, vptable='', mosweight=True, aterm=True, psterm=False, wbawp=True, cfcache='', usepointing=False, computepastep=360.0, rotatepastep=360.0, pointingoffsetsigdev=[''], pblimit=0.2, deconvolver='hogbom', scales=[''], nterms=2, smallscalebias=0.0, restoration=True, restoringbeam='', pbcor=False, weighting='natural', robust=0.5, noise='1.0Jy', npixels=0, uvtaper=[''], niter=0, gain=0.1, threshold=0.0, nsigma=0.0, cycleniter=-1, cyclefactor=1.0, minpsffraction=0.05, maxpsffraction=0.8, interactive=False, usemask='user', mask='', pbmask=0.0, sidelobethreshold=3.0, noisethreshold=5.0, lownoisethreshold=1.5, negativethreshold=0.0, smoothfactor=1.0, minbeamfrac=0.3, cutthreshold=0.01, growiterations=75, dogrowprune=True, minpercentchange=-1.0, verbose=False, fastnoise=True, restart=True, savemodel='none', calcres=True, calcpsf=True)
casatasks.imaging.setjy(vis='', field='', spw='', selectdata=False, timerange='', scan='', intent='', observation='', scalebychan=True, standard='Perley-Butler 2017', model='', modimage='', listmodels=False, fluxdensity=-1, spix=0.0, reffreq='1GHz', polindex=[''], polangle=[''], rotmeas=0.0, fluxdict='', useephemdir=False, interpolation='nearest', usescratch=False, ismms=False)
casatasks.imaging.tclean(vis, selectdata=True, field='', spw='', timerange='', uvrange='', antenna='', scan='', observation='', intent='', datacolumn='corrected', imagename='', imsize=[100], cell='"1arcsec"', phasecenter='', stokes='I', projection='SIN', startmodel='', specmode='mfs', reffreq='', nchan=-1, start='', width='', outframe='LSRK', veltype='radio', restfreq=[''], interpolation='linear', perchanweightdensity=True, gridder='standard', facets=1, psfphasecenter='', wprojplanes=1, vptable='', mosweight=True, aterm=True, psterm=False, wbawp=True, conjbeams=False, cfcache='', usepointing=False, computepastep=360.0, rotatepastep=360.0, pointingoffsetsigdev=[''], pblimit=0.2, normtype='flatnoise', deconvolver='hogbom', scales=[''], nterms=2, smallscalebias=0.0, restoration=True, restoringbeam='', pbcor=False, outlierfile='', weighting='natural', robust=0.5, noise='1.0Jy', npixels=0, uvtaper=[''], niter=0, gain=0.1, threshold=0.0, nsigma=0.0, cycleniter=-1, cyclefactor=1.0, minpsffraction=0.05, maxpsffraction=0.8, interactive=False, usemask='user', mask='', pbmask=0.0, sidelobethreshold=3.0, noisethreshold=5.0, lownoisethreshold=1.5, negativethreshold=0.0, smoothfactor=1.0, minbeamfrac=0.3, cutthreshold=0.01, growiterations=75, dogrowprune=True, minpercentchange=-1.0, verbose=False, fastnoise=True, restart=True, savemodel='none', calcres=True, calcpsf=True, psfcutoff=0.35, parallel=False)
casatasks.imaging.widebandpbcor(vis, imagename='', nterms=2, threshold='', action='pbcor', reffreq='', pbmin=0.2, field='', spwlist=[''], chanlist=[''], weightlist=[''])
casatasks.information.asdmsummary(asdm)
casatasks.information.browsetable(tablename='', mightedit=False, sortlist='', taql='', skipcols='')
casatasks.information.calstat(caltable, axis='amplitude', datacolumn='gain')
casatasks.information.imhead(imagename, mode='summary', hdkey='', hdvalue='', verbose=False)
casatasks.information.imhistory(imagename, mode='list', verbose=True, origin='imhistory', message='')
casatasks.information.imstat(imagename, axes='-1', region='', box='', chans='', stokes='', listit=True, verbose=True, mask='', stretch=False, logfile='', append=True, algorithm='classic', fence=-1, center='mean', lside=True, zscore=-1, maxiter=-1, clmethod='auto', niter=3)
casatasks.information.listcal(vis, caltable, field='', antenna='', spw='', listfile='', pagerows=50)
casatasks.information.listfits(fitsfile)
casatasks.information.listhistory(vis)
casatasks.information.listobs(vis, selectdata=True, spw='', field='', antenna='', uvrange='', timerange='', correlation='', scan='', intent='', feed='', array='', observation='', verbose=True, listfile='', listunfl=False, cachesize=50, overwrite=False)
casatasks.information.listpartition(vis, createdict=False, listfile='')
casatasks.information.listsdm(sdm)
casatasks.information.listvis(vis, options='ap', datacolumn='data', field='', spw='*', selectdata=False, antenna='', timerange='', correlation='', scan='', feed='', array='', observation='', uvrange='', average='', showflags=False, pagerows=50, listfile='')
casatasks.information.slsearch(outfile='', freqrange=[84, 90], species=[''], reconly=False, chemnames=[''], qns=[''], intensity=[-1], smu2=[-1], loga=[-1], el=[-1], eu=[-1], rrlinclude=True, rrlonly=False, verbose=False, logfile='""', append=False)
casatasks.information.vishead(vis, mode='summary', listitems=['telescope', 'observer', 'project', 'field', 'freq_group_name', 'spw_name', 'schedule', 'schedule_type', 'release_date'], hdkey='', hdindex='', hdvalue='')
casatasks.information.visstat(vis, axis='amplitude', datacolumn='data', useflags=True, spw='', field='', selectdata=True, antenna='', uvrange='', timerange='', correlation='', scan='', array='', observation='', timeaverage=False, timebin='0s', timespan='', maxuvwdistance=0.0, disableparallel=False, ddistart=-1, taql='', monolithic_processing=False, intent='', reportingaxes='ddid', doquantiles=True)
casatasks.manipulation.clearstat()
casatasks.manipulation.concat(vis, concatvis='', freqtol='', dirtol='', respectname=False, timesort=False, copypointing=True, visweightscale=[''], forcesingleephemfield='')
casatasks.manipulation.conjugatevis(vis, spwlist='""', outputvis='', overwrite=False)
casatasks.manipulation.cvel(vis, outputvis='', passall=False, field='', spw='', selectdata=True, antenna='', timerange='', scan='', array='', mode='channel', nchan=-1, start='0', width='1', interpolation='linear', phasecenter='', restfreq='', outframe='', veltype='radio', hanning=False)
casatasks.manipulation.cvel2(vis, outputvis='', keepmms=True, passall=False, field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', array='', uvrange='', observation='', feed='', datacolumn='all', mode='channel', nchan=-1, start='0', width='1', interpolation='linear', phasecenter='', restfreq='', outframe='', veltype='radio', hanning=False)
casatasks.manipulation.fixplanets(vis, field='""', fixuvw=False, direction='', refant='0', reftime='first')
casatasks.manipulation.fixvis(vis, outputvis='', field='""', refcode='', reuse=True, phasecenter='', distances='""', datacolumn='all')
casatasks.manipulation.hanningsmooth(vis, outputvis='', keepmms=True, field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', array='', uvrange='', observation='', feed='', datacolumn='all')
casatasks.manipulation.mstransform(vis, outputvis='', createmms=False, separationaxis='auto', numsubms='auto', tileshape=[0], field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', array='', uvrange='', observation='', feed='', datacolumn='corrected', realmodelcol=False, keepflags=True, usewtspectrum=False, combinespws=False, chanaverage=False, chanbin=1, hanning=False, regridms=False, mode='channel', nchan=-1, start='0', width='1', nspw=1, interpolation='linear', phasecenter='', restfreq='', outframe='', veltype='radio', preaverage=False, timeaverage=False, timebin='0s', timespan='', maxuvwdistance=0.0, docallib=False, callib='', douvcontsub=False, fitspw='', fitorder=0, want_cont=False, denoising_lib=True, nthreads=1, niter=1, disableparallel=False, ddistart=-1, taql='', monolithic_processing=False, reindex=True)
casatasks.manipulation.msuvbin(vis, field='', spw='', taql='', outvis='', phasecenter='', nx=1000, ny=1000, cell='1arcsec', ncorr=1, nchan=1, fstart='1GHz', fstep='1kHz', wproject=False, memfrac=0.5)
casatasks.manipulation.oldstatwt(vis, dorms=False, byantenna=False, sepacs=True, fitspw='', fitcorr='', combine='', timebin='0s', minsamp=2, field='', spw='', antenna='', timerange='', scan='', intent='', array='', correlation='', observation='', datacolumn='corrected')
casatasks.manipulation.partition(vis, outputvis='', createmms=True, separationaxis='auto', numsubms='auto', flagbackup=True, datacolumn='all', field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', array='', uvrange='', observation='', feed='', disableparallel=False, ddistart=-1, taql='')
casatasks.manipulation.rmtables(tablenames=[''])
casatasks.manipulation.split(vis, outputvis='', keepmms=True, field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', array='', uvrange='', observation='', feed='', datacolumn='corrected', keepflags=True, width='1', timebin='0s', combine='')
casatasks.manipulation.statwt(vis, selectdata=True, field='', spw='', intent='', array='', observation='', scan='', combine='', timebin='1', slidetimebin=False, chanbin='spw', minsamp=2, statalg='classic', fence=-1, center='mean', lside=True, zscore=-1, maxiter=-1, fitspw='', excludechans=False, wtrange=[''], flagbackup=True, preview=False, datacolumn='corrected')
casatasks.manipulation.uvcontsub(vis, field='', fitspw='', excludechans=False, combine='', solint='int', fitorder=0, spw='', want_cont=False)
casatasks.manipulation.uvcontsub3(vis, fitspw='', combine='', fitorder=0, field='', spw='', scan='', intent='', correlation='', observation='')
casatasks.manipulation.uvmodelfit(vis, field='', spw='', selectdata=True, timerange='', uvrange='', antenna='', scan='', msselect='', niter=5, comptype='P', sourcepar=[1.0, 0.0, 0.0], varypar=[''], outfile='')
casatasks.manipulation.uvsub(vis, reverse=False)
casatasks.manipulation.virtualconcat(vis, concatvis='', freqtol='', dirtol='', respectname=True, visweightscale=[''], keepcopy=False, copypointing=True)
casatasks.simulation.simalma(project='sim', dryrun=True, skymodel='', inbright='', indirection='', incell='', incenter='', inwidth='', complist='', compwidth='"8GHz"', setpointings=True, ptgfile='$project.ptg.txt', integration='10s', direction=[''], mapsize=['', ''], antennalist=['alma.cycle1.1.cfg', 'aca.cycle1.cfg'], hourangle='transit', totaltime=['20min', '1h'], tpnant=0, tptime='0s', pwv=0.5, image=True, imsize=[128, 128], imdirection='', cell='', niter=0, threshold='0.1mJy', graphics='both', verbose=False, overwrite=False)
casatasks.simulation.simanalyze(project='sim', image=True, imagename='default', skymodel='', vis='default', modelimage='', imsize=[0, 0], imdirection='', cell='', interactive=False, niter=0, threshold='0.1mJy', weighting='natural', mask='', outertaper=[''], pbcor=True, stokes='I', featherimage='', analyze=False, showuv=True, showpsf=True, showmodel=True, showconvolved=False, showclean=True, showresidual=False, showdifference=True, showfidelity=True, graphics='both', verbose=False, overwrite=True, dryrun=False, logfile='')
casatasks.simulation.simobserve(project='sim', skymodel='', inbright='', indirection='', incell='', incenter='', inwidth='', complist='', compwidth='"8GHz"', comp_nchan=1, setpointings=True, ptgfile='$project.ptg.txt', integration='10s', direction=[''], mapsize=['', ''], maptype='hexagonal', pointingspacing='', caldirection='', calflux='1Jy', obsmode='int', refdate='2014/01/01', hourangle='transit', totaltime='7200s', antennalist='', sdantlist='aca.tp.cfg', sdant=0, outframe='LSRK', thermalnoise='tsys-atm', user_pwv=0.5, t_ground=270., t_sky=260., tau0=0.1, seed=11111, leakage=0.0, graphics='both', verbose=False, overwrite=True)
casatasks.single.importasap(infile, outputvis='', flagbackup=True, overwrite=False, parallel=False)
casatasks.single.importnro(infile, outputvis='', overwrite=False, parallel=False)
casatasks.single.nrobeamaverage(infile, datacolumn='float_data', field='', spw='', timerange='', scan='', beam='', timebin='0s', outfile='')
casatasks.single.sdatmcor(infile='', datacolumn='data', outfile='', overwrite=False, field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', observation='', feed='', msselect='', outputspw='', gainfactor='1.0', dtem_dh='', h0='', atmtype=2, atmdetail=False, altitude='', temperature='', pressure='', humidity=-1, pwv='', dp='', dpm=-1, layerboundaries='', layertemperature='')
casatasks.single.sdbaseline(infile, datacolumn='data', antenna='', field='', spw='', timerange='', scan='', pol='', intent='', reindex=True, maskmode='list', thresh=5.0, avg_limit=4, minwidth=4, edge=[0, 0], blmode='fit', dosubtract=True, blformat='text', bloutput='', bltable='', blfunc='poly', order=5, npiece=2, applyfft=True, fftmethod='fft', fftthresh=3.0, addwn=[0], rejwn=[''], clipthresh=3.0, clipniter=0, blparam='', verbose=False, updateweight=False, sigmavalue='stddev', showprogress=False, minnrow=1000, outfile='', overwrite=False)
casatasks.single.sdcal(infile, calmode='ps', fraction='10%', noff=-1, width=0.5, elongated=False, applytable='', interp='', spwmap='', outfile='', overwrite=False, field='', spw='', scan='', intent='')
casatasks.single.sdfit(infile, datacolumn='data', antenna='', field='', spw='', timerange='', scan='', pol='', intent='', timebin='', timespan='', polaverage='', fitfunc='gaussian', fitmode='list', nfit=[0], thresh=5.0, avg_limit=4, minwidth=4, edge=[0, 0], outfile='', overwrite=False)
casatasks.single.sdfixscan(infiles, mode='fft_mask', numpoly=2, beamsize='0.0', smoothsize='2.0', direction='', maskwidth='1.0', tmax=0.0, tmin=0.0, outfile='', overwrite=False)
casatasks.single.sdgaincal(infile, calmode='doublecircle', radius='', smooth=True, antenna='', field='', spw='', scan='', intent='', applytable='', interp='', spwmap=[''], outfile='', overwrite=False)
casatasks.single.sdimaging(infiles, outfile='', overwrite=False, field='', spw='', antenna='', scan='', intent='OBSERVE_TARGET#ON_SOURCE', mode='channel', nchan=-1, start='0', width='1', veltype='radio', outframe='', gridfunction='BOX', convsupport=-1, truncate='-1', gwidth='-1', jwidth='-1', imsize=[''], cell='', phasecenter='', projection='SIN', ephemsrcname='', pointingcolumn='direction', restfreq='', stokes='', minweight=0.1, brightnessunit='', clipminmax=False)
casatasks.single.sdpolaverage(infile, datacolumn='data', antenna='', field='', spw='', timerange='', scan='', intent='', polaverage='', outfile='')
casatasks.single.sdsidebandsplit(outfile='', overwrite=False, signalshift=[''], imageshift=[''], getbothside=False, refchan=0.0, refval='', otherside=False, threshold=0.2)
casatasks.single.sdsmooth(infile, datacolumn='data', antenna='', field='', spw='', timerange='', scan='', pol='', intent='', reindex=True, kernel='gaussian', kwidth=5, outfile='', overwrite=False)
casatasks.single.sdtimeaverage(infile, datacolumn='float_data', field='', spw='', timerange='', scan='', antenna='', timebin='all', timespan='scan', outfile='')
casatasks.single.tsdimaging(infiles, outfile='', overwrite=False, field='', spw='', antenna='', scan='', intent='OBSERVE_TARGET#ON_SOURCE', mode='channel', nchan=-1, start='0', width='1', veltype='radio', specmode='cube', outframe='', gridfunction='BOX', convsupport=-1, truncate='-1', gwidth='-1', jwidth='-1', imsize=[''], cell='', phasecenter='', projection='SIN', pointingcolumn='direction', restfreq='', stokes='I', minweight=0.1, brightnessunit='', clipminmax=False)
casatasks.visualization.imview(raster='', contour='', zoom='1', axes='', out='')
casatasks.visualization.msview(infile, displaytype='raster', channel=0, zoom=1, outfile='', outscale=1.0, outdpi=300, outformat='jpg', outlandscape=False, gui=True)
casatasks.visualization.plotants(vis, figfile='', antindex=False, logpos=False, exclude='', checkbaselines=False, title='', showgui=True)
casatasks.visualization.plotbandpass(caltable, antenna='', field='', spw='', yaxis='amp', xaxis='chan', figfile='', plotrange=[0,0,0,0], caltable2='', overlay='', showflagged=False, timeranges='', buildpdf=False, caltable3='', markersize=3, density=108, interactive=True, showpoints='auto', showlines='auto', subplot='22', zoom='', poln='['']', showatm=False, pwv='auto', gs='gs', convert='convert', chanrange='', solutionTimeThresholdSeconds=30.0, debug=False, phase='['']', vis='', showtsky=False, showfdm=False, showatmfield='', lo1='', showimage=False, showatmpoints=False, parentms='', pdftk='pdftk', channeldiff=False, edge=8, resample=1, platformingThreshold=10.0, platformingSigma=10.0, basebands='', showBasebandNumber=False, scans='', figfileSequential=False, chanrangeSetXrange=False)
casatasks.visualization.plotcal(caltable, xaxis='', yaxis='', poln='', field='', antenna='', spw='', timerange='', subplot=111, overplot=False, clearpanel='Auto', iteration='', plotrange=[            ], showflags=False, plotsymbol='o', plotcolor='blue', markersize=5.0, fontsize=10.0, showgui=True, figfile='')
casatasks.visualization.plotms(vis='', gridrows=1, gridcols=1, rowindex=0, colindex=0, plotindex=0, xaxis='', xdatacolumn='', xframe='', xinterp='', yaxis='', ydatacolumn='', yframe='', yinterp='', yaxislocation='', selectdata=True, field='', spw='', timerange='', uvrange='', antenna='', scan='', correlation='', array='', observation='', intent='', feed='', msselect='', averagedata=True, avgchannel='', avgtime='', avgscan=False, avgfield=False, avgbaseline=False, avgantenna=False, avgspw=False, scalar=False, transform=True, freqframe='', restfreq='', veldef='RADIO', shift=[0.0, 0.0], extendflag=False, extcorr=False, extchannel=False, iteraxis='', xselfscale=False, yselfscale=False, xsharedaxis=False, ysharedaxis=False, customsymbol='False', symbolshape='autoscaling', symbolsize='2', symbolcolor='0000ff', symbolfill='fill', symboloutline='False', coloraxis='', customflaggedsymbol='False', flaggedsymbolshape='circle', flaggedsymbolsize='2', flaggedsymbolcolor='ff0000', flaggedsymbolfill='fill', flaggedsymboloutline='False', xconnector='', timeconnector=False, plotrange=[''], title='', titlefont=0, xlabel='', xaxisfont=0, ylabel='', yaxisfont=0, showmajorgrid=False, majorwidth=1, majorstyle='', majorcolor='B0B0B0', showminorgrid=False, minorwidth=1, minorstyle='', minorcolor='D0D0D0', showlegend=False, legendposition='', plotfile='', expformat='', verbose=True, exprange='', highres=False, dpi=-1, width=-1, height=-1, overwrite=False, showgui=True, clearplots=True, callib=[''], headeritems='', showatm=False, showtsky=False, showimage=False)
casatasks.visualization.plotprofilemap(imagename, figfile='', overwrite=False, transparent=False, pol=0, spectralaxis='', restfreq='', plotrange='', title='', linecolor='b', linestyle='-', linewidth=0.2, separatepanel=True, plotmasked='empty', maskedcolor='gray', showaxislabel=False, showtick=False, showticklabel=False, figsize='', numpanels='')
casatasks.visualization.plotweather(vis, seasonal_weight=0.5, doPlot=True, plotName='')
casatasks.visualization.viewer(infile, displaytype='raster', channel=0, zoom=1, outfile='', outscale=1.0, outdpi=300, outformat='jpg', outlandscape=False, gui=True)
casatools.agentflagger.agentflagger(self)
casatools.agentflagger.done(self)
casatools.agentflagger.open(self, msname='', ntime=0.0)
casatools.agentflagger.selectdata(self, config='', field='', spw='', array='', feed='', scan='', antenna='', uvrange='', timerange='', correlation='', intent='', observation='')
casatools.agentflagger.parseagentparameters(self, aparams='')
casatools.agentflagger.init(self)
casatools.agentflagger.run(self, writeflags=True, sequential=True)
casatools.agentflagger.getflagversionlist(self, printflags=True)
casatools.agentflagger.printflagselection(self)
casatools.agentflagger.saveflagversion(self, versionname='', comment='', merge='')
casatools.agentflagger.restoreflagversion(self, versionname=[''], merge='')
casatools.agentflagger.deleteflagversion(self, versionname=[''])
casatools.agentflagger.parsemanualparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', autocorr=False, apply=True)
casatools.agentflagger.parseclipparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', datacolumn='DATA', clipminmax=[''], clipoutside=True, channelavg=False, chanbin=1, timeavg=False, timebin='', clipzeros=False, apply=True)
casatools.agentflagger.parsequackparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', quackmode='beg', quackinterval=0.0, quackincrement=False, apply=True)
casatools.agentflagger.parseelevationparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', lowerlimit=0.0, upperlimit=90.0, apply=True)
casatools.agentflagger.parsetfcropparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', ntime=0.0, combinescans=False, datacolumn='DATA', timecutoff=4.0, freqcutoff=3.0, timefit='line', freqfit='poly', maxnpieces=7, flagdimension='freqtime', usewindowstats='none', halfwin=1, extendflags=True, apply=True, channelavg=False, chanbin=1, timeavg=False, timebin='')
casatools.agentflagger.parseantintparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', antint_ref_antenna='', minchanfrac=0.6, verbose=False, apply=True)
casatools.agentflagger.parseextendparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', ntime=0.0, combinescans=False, extendpols=True, growtime=50.0, growfreq=50.0, growaround=False, flagneartime=False, flagnearfreq=False, apply=True)
casatools.agentflagger.parsesummaryparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', spwchan=False, spwcorr=False, basecnt=False, fieldcnt=False, name='')
casatools.sakura.sakura(self)
casatools.sakura.initialize_sakura(self, level='WARN')
casatools.sakura.cleanup_sakura(self)
casatools.calanalysis.calanalysis(self)
casatools.calanalysis.open(self, caltable='')
casatools.calanalysis.close(self)
casatools.calanalysis.calname(self)
casatools.calanalysis.msname(self)
casatools.calanalysis.viscal(self)
casatools.calanalysis.partype(self)
casatools.calanalysis.polbasis(self)
casatools.calanalysis.numfield(self)
casatools.calanalysis.field(self, name=True)
casatools.calanalysis.numantenna(self)
casatools.calanalysis.numantenna1(self)
casatools.calanalysis.numantenna2(self)
casatools.calanalysis.antenna(self, name=True)
casatools.calanalysis.antenna1(self, name=True)
casatools.calanalysis.antenna2(self, name=True)
casatools.calanalysis.numfeed(self)
casatools.calanalysis.feed(self)
casatools.calanalysis.numtime(self)
casatools.calanalysis.time(self)
casatools.calanalysis.numspw(self)
casatools.calanalysis.spw(self, name=True)
casatools.calanalysis.numchannel(self)
casatools.calanalysis.freq(self)
casatools.calanalysis.get(self, field='', antenna='', timerange='', spw='', feed='', axis='TIME', ap='AMPLITUDE', norm=False, unwrap=False, jumpmax=0.0)
casatools.calanalysis.fit(self, field='', antenna='', timerange='', spw='', feed='', axis='TIME', ap='AMPLITUDE', norm=False, unwrap=False, jumpmax=0.0, order='AVERAGE', type='LSQ', weight=False)
casatools.synthesismaskhandler.synthesismaskhandler(self)
casatools.synthesismaskhandler.pruneregions(self, inmaskname='', prunesize=0.0, chanflag=[''], outmaskname='')
casatools.synthesismaskhandler.done(self)
casatools.table.table(self)
casatools.table.fromfits(self, tablename='', fitsfile='', whichhdu=1, storage='standard', convention='none', nomodify=True, ack=True)
casatools.table.fromascii(self, tablename='', asciifile='', headerfile='', autoheader=False, autoshape=[-1], sep='', commentmarker='', firstline=0, lastline=-1, nomodify=True, columnnames=[''], datatypes=[''])
casatools.table.open(self, tablename='', lockoptions='', nomodify=True)
casatools.table.create(self, tablename='', tabledesc='', lockoptions='default', endianformat='', memtype='', nrow=0, dminfo='')
casatools.table.flush(self)
casatools.table.fromASDM(self, tablename='', xmlfile='')
casatools.table.resync(self)
casatools.table.close(self)
casatools.table.copy(self, newtablename='', deep=False, valuecopy=False, dminfo='', endian='aipsrc', memorytable=False, returnobject=False, norows=False)
casatools.table.copyrows(self, outtable='', startrowin=0, startrowout=-1, nrow=-1)
casatools.table.done(self)
casatools.table.iswritable(self)
casatools.table.isopened(self, tablename='')
casatools.table.endianformat(self)
casatools.table.lock(self, write=True, nattempts=0)
casatools.table.unlock(self)
casatools.table.datachanged(self)
casatools.table.haslock(self, write=True)
casatools.table.lockoptions(self)
casatools.table.ismultiused(self, checksubtables=False)
casatools.table.browse(self)
casatools.table.name(self)
casatools.table.createmultitable(self, outputTableName='', tables='', subdirname='')
casatools.table.toasciifmt(self, asciifile='', headerfile='', columns=[''], sep='')
casatools.table.taql(self, taqlcommand='TaQL expression')
casatools.table.query(self, query='String', name='', sortlist='', columns='', style='')
casatools.table.calc(self, expr='', prefix='using style base0, endincl, fortranorder', showtaql=False)
casatools.table.selectrows(self, rownrs='', name='')
casatools.table.info(self)
casatools.table.putinfo(self, value='')
casatools.table.addreadmeline(self, value='')
casatools.table.summary(self, recurse=False)
casatools.table.colnames(self)
casatools.table.rownumbers(self, tab='', nbytes=0)
casatools.table.setmaxcachesize(self, columnname='', nbytes='')
casatools.table.isscalarcol(self, columnname='')
casatools.table.isvarcol(self, columnname='')
casatools.table.coldatatype(self, columnname='')
casatools.table.colarraytype(self, columnname='')
casatools.table.ncols(self)
casatools.table.nrows(self)
casatools.table.addrows(self, nrow=1)
casatools.table.removerows(self, rownrs='')
casatools.table.addcols(self, desc='', dminfo='')
casatools.table.renamecol(self, oldname='', newname='')
casatools.table.removecols(self, columnames='')
casatools.table.iscelldefined(self, columnname='', rownr=0)
casatools.table.getcell(self, columnname='', rownr=0)
casatools.table.getcellslice(self, columnname='', rownr='', blc='', trc='', incr=[1])
casatools.table.getcol(self, columnname='', startrow=0, nrow=-1, rowincr=1)
casatools.table.getvarcol(self, columnname='', startrow=0, nrow=-1, rowincr=1)
casatools.table.getcolslice(self, columnname='', blc='', trc='', incr='', startrow=0, nrow=-1, rowincr=1)
casatools.table.putcell(self, columnname='', rownr='', thevalue='')
casatools.table.putcellslice(self, columnname='', rownr='', value='', blc='', trc='', incr=[1])
casatools.table.putcol(self, columnname='', value='', startrow=0, nrow=-1, rowincr=1)
casatools.table.putvarcol(self, columnname='', value='', startrow=0, nrow=-1, rowincr=1)
casatools.table.putcolslice(self, columnname='', value='', blc='', trc='', incr=[1], startrow=0, nrow=-1, rowincr=1)
casatools.table.getcolshapestring(self, columnname='', startrow=0, nrow=-1, rowincr=1)
casatools.table.getkeyword(self, keyword='')
casatools.table.getkeywords(self)
casatools.table.getcolkeyword(self, columnname='', keyword='')
casatools.table.getcolkeywords(self, columnname='')
casatools.table.putkeyword(self, keyword='', value='', makesubrecord=False)
casatools.table.putkeywords(self, value='')
casatools.table.putcolkeyword(self, columnname='', keyword='', value='')
casatools.table.putcolkeywords(self, columnname='', value='')
casatools.table.removekeyword(self, keyword='')
casatools.table.removecolkeyword(self, columnname='', keyword='')
casatools.table.getdminfo(self)
casatools.table.keywordnames(self)
casatools.table.fieldnames(self, keyword='')
casatools.table.colkeywordnames(self, columnname='')
casatools.table.colfieldnames(self, columnname='', keyword='')
casatools.table.getdesc(self, actual=True)
casatools.table.getcoldesc(self, columnname='')
casatools.table.ok(self)
casatools.table.clearlocks(self)
casatools.table.listlocks(self)
casatools.table.statistics(self, column='', complex_value='')
casatools.table.showcache(self, verbose=True)
casatools.table.testincrstman(self, column='')
casatools.atcafiller.atcafiller(self)
casatools.atcafiller.open(self, msname='', filenames=[''], options=[''])
casatools.atcafiller.fill(self)
casatools.atcafiller.select(self, firstscan=0, lastscan=9999, spw=[-1], lowfreq=0.1, highfreq=999.0, fields=[''], edge=8.0)
casatools.atcafiller.opacities(self, fghz=[''], tempk=300.0, humi=50.0, press=1010.0, height=200.0)
casatools.coordsys.coordsys(self)
casatools.coordsys.newcoordsys(self, direction=False, spectral=False, stokes=[''], linear=0, tabular=False)
casatools.coordsys.addcoordinate(self, direction=False, spectral=False, stokes=[''], linear=0, tabular=False)
casatools.coordsys.axesmap(self, toworld=True)
casatools.coordsys.axiscoordinatetypes(self, world=True)
casatools.coordsys.conversiontype(self, type='direction')
casatools.coordsys.convert(self, coordin='', absin=[True], dopplerin='radio', unitsin=['Native'], absout=[True], dopplerout='radio', unitsout=['Native'], shape=[-1])
casatools.coordsys.convertdirection(self, frame='')
casatools.coordsys.convertmany(self, coordin='', absin=[True], dopplerin='radio', unitsin=['Native'], absout=[True], dopplerout='radio', unitsout=['Native'], shape=[-1])
casatools.coordsys.coordinatetype(self, which=-1)
casatools.coordsys.copy(self)
casatools.coordsys.done(self)
casatools.coordsys.epoch(self)
casatools.coordsys.findaxis(self, world=True, axis=0)
casatools.coordsys.findaxisbyname(self, axisname='', allowfriendlyname=True)
casatools.coordsys.findcoordinate(self, type='direction', which=0)
casatools.coordsys.frequencytofrequency(self, value='', frequnit='', velocity='')
casatools.coordsys.frequencytovelocity(self, value='', frequnit='', doppler='radio', velunit='km/s')
casatools.coordsys.fromrecord(self, record='')
casatools.coordsys.increment(self, format='n', type='')
casatools.coordsys.lineartransform(self, type='')
casatools.coordsys.names(self, type='')
casatools.coordsys.naxes(self, world=True)
casatools.coordsys.ncoordinates(self)
casatools.coordsys.observer(self)
casatools.coordsys.projection(self, type='')
casatools.coordsys.referencecode(self, type='', list=False)
casatools.coordsys.referencepixel(self, type='')
casatools.coordsys.referencevalue(self, format='n', type='')
casatools.coordsys.reorder(self, order='')
casatools.coordsys.transpose(self, order='')
casatools.coordsys.replace(self, csys='', whichin='', whichout='')
casatools.coordsys.restfrequency(self)
casatools.coordsys.setconversiontype(self, direction='', spectral='')
casatools.coordsys.getconversiontype(self, type='', showconversion=True)
casatools.coordsys.setdirection(self, refcode='', proj='', projpar=[-1], refpix=[-1], refval='', incr='', xform='', poles='')
casatools.coordsys.setepoch(self, value='')
casatools.coordsys.setincrement(self, value='', type='')
casatools.coordsys.setlineartransform(self, type='', value='')
casatools.coordsys.setnames(self, value='', type='')
casatools.coordsys.setobserver(self, value='')
casatools.coordsys.setprojection(self, type='', parameters=[-1])
casatools.coordsys.setreferencecode(self, value='', type='direction', adjust=True)
casatools.coordsys.setreferencelocation(self, pixel=[-1], world='-1', mask=[False])
casatools.coordsys.setreferencepixel(self, value='', type='')
casatools.coordsys.setreferencevalue(self, value='', type='')
casatools.coordsys.setrestfrequency(self, value='', which=0, append=False)
casatools.coordsys.setspectral(self, refcode='', restfreq='', frequencies='1GHz', doppler='', velocities='1km/s')
casatools.coordsys.setstokes(self, stokes='')
casatools.coordsys.settabular(self, pixel=[-1], world=[-1], which=0)
casatools.coordsys.settelescope(self, value='')
casatools.coordsys.setunits(self, value='', type='', overwrite=False, which=-10)
casatools.coordsys.stokes(self)
casatools.coordsys.summary(self, doppler='RADIO', list=True)
casatools.coordsys.telescope(self)
casatools.coordsys.toabs(self, value='', isworld=-1)
casatools.coordsys.toabsmany(self, value='', isworld=-1)
casatools.coordsys.topixel(self, value='')
casatools.coordsys.topixelmany(self, value='')
casatools.coordsys.torecord(self)
casatools.coordsys.subimage(self, originshft='', newshape=[''])
casatools.coordsys.torel(self, value='', isworld=-1)
casatools.coordsys.torelmany(self, value='', isworld=-1)
casatools.coordsys.toworld(self, value='', format='n')
casatools.coordsys.toworldmany(self, value='')
casatools.coordsys.type(self)
casatools.coordsys.units(self, type='')
casatools.coordsys.velocitytofrequency(self, value='', frequnit='', doppler='radio', velunit='km/s')
casatools.coordsys.parentname(self)
casatools.coordsys.setparentname(self, imagename='')
casatools.synthesisutils.synthesisutils(self)
casatools.synthesisutils.contdatapartition(self, selpars='', npart=1)
casatools.synthesisutils.advisechansel(self, freqstart='1.0e6', freqend='1.1e6', freqstep='100.0', freqframe='LSRK', ephemtable='', msname='', fieldid=0, getfreqrange=False, spwselection='')
casatools.synthesisutils.cubedatapartition(self, selpars='', npart=1, fstart='1GHz', fend='1.5GHz', frame='LSRK')
casatools.synthesisutils.cubeimagepartition(self, impars='', npart=1)
casatools.synthesisutils.cubedataimagepartition(self, selpars='', incsys='', npart=1, nchannel=1)
casatools.synthesisutils.checkselectionparams(self, selpars='')
casatools.synthesisutils.checkimageparams(self, impars='')
casatools.synthesisutils.checkgridparams(self, gridpars='')
casatools.synthesisutils.updateimpars(self, impars='')
casatools.synthesisutils.getOptimumSize(self, size=100)
casatools.synthesisutils.fitPsfBeam(self, imagename='', nterms=1, psfcutoff=0.35)
casatools.synthesisutils.done(self)
casatools.atmosphere.atmosphere(self)
casatools.atmosphere.close(self)
casatools.atmosphere.done(self)
casatools.atmosphere.getAtmVersion(self)
casatools.atmosphere.listAtmosphereTypes(self)
casatools.atmosphere.initAtmProfile(self, altitude=5000., temperature=270.0, pressure=560.0, maxAltitude=48.0, humidity=20.0, dTem_dh=-5.6, dP=10.0, dPm=1.2, h0=2.0, atmType=1, layerBoundaries=[''], layerTemperature=[''])
casatools.atmosphere.updateAtmProfile(self, altitude=5000., temperature=270.0, pressure=560.0, humidity=20.0, dTem_dh=-5.6, h0=2.0)
casatools.atmosphere.getBasicAtmParms(self)
casatools.atmosphere.getNumLayers(self)
casatools.atmosphere.getGroundWH2O(self)
casatools.atmosphere.getProfile(self)
casatools.atmosphere.initSpectralWindow(self, nbands=1, fCenter=90, fWidth=0.64, fRes=0.0)
casatools.atmosphere.addSpectralWindow(self, fCenter=350, fWidth=0.008, fRes=0.002)
casatools.atmosphere.getNumSpectralWindows(self)
casatools.atmosphere.getNumChan(self, spwid=0)
casatools.atmosphere.getRefChan(self, spwid=0)
casatools.atmosphere.getRefFreq(self, spwid=0)
casatools.atmosphere.getChanSep(self, spwid=0)
casatools.atmosphere.getChanFreq(self, chanNum=0, spwid=0)
casatools.atmosphere.getSpectralWindow(self, spwid=0)
casatools.atmosphere.getChanNum(self, freq='', spwid=0)
casatools.atmosphere.getBandwidth(self, spwid=0)
casatools.atmosphere.getMinFreq(self, spwid=0)
casatools.atmosphere.getMaxFreq(self, spwid=0)
casatools.atmosphere.getDryOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getDryContOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getO2LinesOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getO3LinesOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getCOLinesOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getN2OLinesOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getWetOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getH2OLinesOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getH2OContOpacity(self, nc=-1, spwid=0)
casatools.atmosphere.getDryOpacitySpec(self, spwid=0)
casatools.atmosphere.getWetOpacitySpec(self, spwid=0)
casatools.atmosphere.getDispersivePhaseDelay(self, nc=-1, spwid=0)
casatools.atmosphere.getDispersiveWetPhaseDelay(self, nc=-1, spwid=0)
casatools.atmosphere.getNonDispersiveWetPhaseDelay(self, nc=-1, spwid=0)
casatools.atmosphere.getNonDispersiveDryPhaseDelay(self, nc=-1, spwid=0)
casatools.atmosphere.getNonDispersivePhaseDelay(self, nc=-1, spwid=0)
casatools.atmosphere.getDispersivePathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getDispersiveWetPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getNonDispersiveWetPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getNonDispersiveDryPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getO2LinesPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getO3LinesPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getCOLinesPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getN2OLinesPathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getNonDispersivePathLength(self, nc=-1, spwid=0)
casatools.atmosphere.getAbsH2OLines(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsH2OCont(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsO2Lines(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsDryCont(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsO3Lines(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsCOLines(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsN2OLines(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsTotalDry(self, nl='', nf=0, spwid=0)
casatools.atmosphere.getAbsTotalWet(self, nl='', nf=0, spwid=0)
casatools.atmosphere.setUserWH2O(self, wh2o=0.0)
casatools.atmosphere.getUserWH2O(self)
casatools.atmosphere.setAirMass(self, airmass='')
casatools.atmosphere.getAirMass(self)
casatools.atmosphere.setSkyBackgroundTemperature(self, tbgr=2.73)
casatools.atmosphere.getSkyBackgroundTemperature(self)
casatools.atmosphere.getAverageTebbSky(self, spwid=0, wh2o=-1)
casatools.atmosphere.getTebbSky(self, nc=-1, spwid=0, wh2o=-1)
casatools.atmosphere.getTebbSkySpec(self, spwid=0, wh2o=-1)
casatools.atmosphere.getAverageTrjSky(self, spwid=0, wh2o=-1)
casatools.atmosphere.getTrjSky(self, nc=-1, spwid=0, wh2o=-1)
casatools.atmosphere.getTrjSkySpec(self, spwid=0, wh2o=-1)
casatools.componentlist.componentlist(self)
casatools.componentlist.open(self, filename='', nomodify=False, log=True)
casatools.componentlist.asciitocomponentlist(self, filename='', asciifile='', refer='B1950', format='ST', direction='', spectrum='', flux='', log=True)
casatools.componentlist.concatenate(self, list='', which=[-1], log=True)
casatools.componentlist.fromrecord(self, record='')
casatools.componentlist.torecord(self)
casatools.componentlist.remove(self, which=[-1], log=True)
casatools.componentlist.purge(self)
casatools.componentlist.recover(self, log=True)
casatools.componentlist.length(self)
casatools.componentlist.indices(self)
casatools.componentlist.sort(self, criteria='Polarization', log=True)
casatools.componentlist.isphysical(self, which=[-1])
casatools.componentlist.sample(self, direction='J2000 00h00m00.00 90d00m00.0', pixellatsize='0.0deg', pixellongsize='0.0deg', frequency='1.4GHz')
casatools.componentlist.rename(self, filename='', log=True)
casatools.componentlist.simulate(self, howmany=1, log=True)
casatools.componentlist.addcomponent(self, flux='', fluxunit='Jy', polarization='Circular', dir='J2000 00h00m00.0 90d00m00.0', shape='disk', majoraxis='2.0arcmin', minoraxis='1.0arcmin', positionangle='0.0deg', freq='LSRK 1.415GHz', spectrumtype='spectral index', index=1.0, optionalparms=[0.0], label='')
casatools.componentlist.close(self, log=True)
casatools.componentlist.edit(self, which='', log=True)
casatools.componentlist.done(self)
casatools.componentlist.select(self, which='')
casatools.componentlist.deselect(self, which='')
casatools.componentlist.selected(self)
casatools.componentlist.getlabel(self, which='')
casatools.componentlist.setlabel(self, which='', value='', log=True)
casatools.componentlist.getfluxvalue(self, which='')
casatools.componentlist.getfluxunit(self, which='')
casatools.componentlist.getfluxpol(self, which='')
casatools.componentlist.getfluxerror(self, which='')
casatools.componentlist.setflux(self, which='', value='', unit='Jy', polarization='circular', error='', log=True)
casatools.componentlist.convertfluxunit(self, which='', unit='Jy')
casatools.componentlist.convertfluxpol(self, which='', polarization='circular')
casatools.componentlist.getrefdir(self, which='')
casatools.componentlist.getrefdirra(self, which='', unit='deg', precision=6)
casatools.componentlist.getrefdirdec(self, which='', unit='deg', precision=6)
casatools.componentlist.getrefdirframe(self, which='')
casatools.componentlist.setrefdir(self, which=1, ra='', dec='', log=True)
casatools.componentlist.setrefdirframe(self, which='', frame='', log=True)
casatools.componentlist.convertrefdir(self, which='', frame='')
casatools.componentlist.shapetype(self, which='')
casatools.componentlist.getshape(self, which='')
casatools.componentlist.setshape(self, which='', type='disk', majoraxis='1.0arcmin', minoraxis='1.0arcmin', positionangle='0.0deg', majoraxiserror='0.0arcmin', minoraxiserror='0.0arcmin', positionangleerror='0.0deg', optionalparms=[0.0], log=True)
casatools.componentlist.convertshape(self, which='', majoraxis='rad', minoraxis='rad', positionangle='rad')
casatools.componentlist.spectrumtype(self, which='')
casatools.componentlist.getspectrum(self, which='')
casatools.componentlist.setstokesspectrum(self, which='', type='spectral index', index=[0.0], tabularfreqs=[1.0e11], tabulari=[1.0], tabularq=[0.0], tabularu=[0.0], tabularv=[0.0], reffreq='1.4GHz', frame='LSRK')
casatools.componentlist.setspectrum(self, which='', type='spectral index', index=0.0, tabularfreqs=[1.0e11], tabularflux=[1.0], tabularframe='LSRK')
casatools.componentlist.getfreq(self, which='')
casatools.componentlist.getfreqvalue(self, which='')
casatools.componentlist.getfrequnit(self, which='')
casatools.componentlist.getfreqframe(self, which='')
casatools.componentlist.setfreq(self, which='', value='', unit='GHz', log=True)
casatools.componentlist.setfreqframe(self, which='', frame='TOPO', log=True)
casatools.componentlist.convertfrequnit(self, which='', unit='GHz')
casatools.componentlist.getcomponent(self, which='', iknow=False)
casatools.componentlist.add(self, thecomponent='', iknow=True)
casatools.componentlist.replace(self, which='', list='', whichones=[-1])
casatools.componentlist.summarize(self, which=-1)
casatools.componentlist.iscomponentlist(self, tool='')
casatools.msmetadata.msmetadata(self)
casatools.msmetadata.almaspws(self, chavg=False, fdm=False, sqld=False, tdm=False, wvr=False, complement=False)
casatools.msmetadata.antennadiameter(self, antenna='-1')
casatools.msmetadata.antennaids(self, name='', mindiameter='0m', maxdiameter='1pc', obsid=-1)
casatools.msmetadata.antennanames(self, antennaids=-1)
casatools.msmetadata.antennaoffset(self, which='0')
casatools.msmetadata.antennaposition(self, which='0')
casatools.msmetadata.antennastations(self, which='-1', obsid=-1)
casatools.msmetadata.antennasforscan(self, scan=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.bandwidths(self, spw=-1)
casatools.msmetadata.baseband(self, spw='')
casatools.msmetadata.baselines(self)
casatools.msmetadata.chanavgspws(self)
casatools.msmetadata.chaneffbws(self, spw='', unit='', asvel=False)
casatools.msmetadata.chanfreqs(self, spw='', unit='Hz')
casatools.msmetadata.chanres(self, spw='', unit='', asvel=False)
casatools.msmetadata.chanwidths(self, spw='', unit='Hz')
casatools.msmetadata.close(self)
casatools.msmetadata.corrprodsforpol(self, pol=-1)
casatools.msmetadata.corrtypesforpol(self, pol=-1)
casatools.msmetadata.datadescids(self, spw=-1, pol=-1)
casatools.msmetadata.done(self)
casatools.msmetadata.effexposuretime(self)
casatools.msmetadata.exposuretime(self, scan=0, spwid=0, polid=-1, obsid=0, arrayid=0)
casatools.msmetadata.fdmspws(self)
casatools.msmetadata.fieldnames(self)
casatools.msmetadata.fieldsforintent(self, intent='', asnames=False)
casatools.msmetadata.fieldsforname(self, name='')
casatools.msmetadata.fieldsforscan(self, scan=-1, asnames=False, obsid=-1, arrayid=-1)
casatools.msmetadata.fieldsforscans(self, scans=[''], asnames=False, obsid=-1, arrayid=-1, asmap=False)
casatools.msmetadata.fieldsforsource(self, source=-1, asnames=False)
casatools.msmetadata.fieldsforsources(self, asnames=False)
casatools.msmetadata.fieldsforspw(self, spw=-1, asnames=False)
casatools.msmetadata.fieldsfortimes(self, time=-1, tol=0)
casatools.msmetadata.intents(self)
casatools.msmetadata.intentsforfield(self, field='-1')
casatools.msmetadata.intentsforscan(self, scan=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.intentsforspw(self, spw=-1)
casatools.msmetadata.meanfreq(self, spw='', unit='Hz')
casatools.msmetadata.name(self)
casatools.msmetadata.namesforfields(self, fieldids='')
casatools.msmetadata.namesforspws(self, spwids='')
casatools.msmetadata.nantennas(self)
casatools.msmetadata.narrays(self)
casatools.msmetadata.nbaselines(self, ac=False)
casatools.msmetadata.nchan(self, spw='')
casatools.msmetadata.ncorrforpol(self, polid=-1)
casatools.msmetadata.nfields(self)
casatools.msmetadata.nobservations(self)
casatools.msmetadata.nspw(self, includewvr=True)
casatools.msmetadata.nstates(self)
casatools.msmetadata.nscans(self)
casatools.msmetadata.nsources(self)
casatools.msmetadata.nrows(self, autoc=True, flagged=True)
casatools.msmetadata.observers(self)
casatools.msmetadata.observatorynames(self)
casatools.msmetadata.observatoryposition(self, which=0)
casatools.msmetadata.open(self, msfile='', maxcache=50)
casatools.msmetadata.phasecenter(self, fieldid=0, epoch='')
casatools.msmetadata.pointingdirection(self, rownum=0, interpolate=False, initialrow=0)
casatools.msmetadata.polidfordatadesc(self, ddid=-1)
casatools.msmetadata.projects(self)
casatools.msmetadata.propermotions(self)
casatools.msmetadata.refdir(self, field='0', epoch='')
casatools.msmetadata.reffreq(self, spw=-1)
casatools.msmetadata.restfreqs(self, sourceid=0, spw=0)
casatools.msmetadata.scannumbers(self, obsid=-1, arrayid=-1)
casatools.msmetadata.scansforfield(self, field='', obsid=-1, arrayid=-1)
casatools.msmetadata.scansforfields(self, obsid=0, arrayid=0)
casatools.msmetadata.scansforintent(self, intent='', obsid=-1, arrayid=-1)
casatools.msmetadata.scansforspw(self, spw=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.scansforspws(self, obsid=0, arrayid=0)
casatools.msmetadata.scansforstate(self, state=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.scansfortimes(self, time=-1, tol=0, obsid=-1, arrayid=-1)
casatools.msmetadata.schedule(self, obsid=-1)
casatools.msmetadata.sideband(self, spw='')
casatools.msmetadata.sourcedirs(self)
casatools.msmetadata.sourcetimes(self)
casatools.msmetadata.sourceidforfield(self, field=-1)
casatools.msmetadata.sourceidsfromsourcetable(self)
casatools.msmetadata.sourcenames(self)
casatools.msmetadata.spwsforbaseband(self, baseband=-1, sqldmode='include')
casatools.msmetadata.spwfordatadesc(self, ddid=-1)
casatools.msmetadata.spwsforfield(self, field='')
casatools.msmetadata.spwsforfields(self)
casatools.msmetadata.spwsforintent(self, intent='')
casatools.msmetadata.spwsfornames(self, spwids='')
casatools.msmetadata.spwsforscan(self, scan=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.spwsforscans(self, obsid=0, arrayid=0)
casatools.msmetadata.statesforscan(self, scan=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.statesforscans(self, obsid=0, arrayid=0)
casatools.msmetadata.summary(self)
casatools.msmetadata.tdmspws(self)
casatools.msmetadata.timerangeforobs(self, obsid=-1)
casatools.msmetadata.timesforfield(self, field=-1)
casatools.msmetadata.timesforintent(self, intent='')
casatools.msmetadata.timesforscan(self, scan=-1, obsid=-1, arrayid=-1, perspw=False)
casatools.msmetadata.timesforscans(self, scans=-1, obsid=-1, arrayid=-1)
casatools.msmetadata.timesforspws(self, spw=-1)
casatools.msmetadata.transitions(self, sourceid=0, spw=0)
casatools.msmetadata.wvrspws(self, complement=False)
casatools.functional.functional(self)
casatools.functional.f(self, x=0)
casatools.functional.ndim(self)
casatools.functional.done(self)
casatools.functional.gaussian1d(self, amplitude=1, center=0, fwhm=1)
casatools.functional.gaussian2d(self, amplitude=1, center=[-1], fwhm=[-1], pa='0')
casatools.functional.polynomial(self, coefficients=[0])
casatools.functional.powerlogpoly(self, coefficients=[0])
casatools.utils.utils(self)
casatools.utils.verify(self, input='', xmldescriptor='', throwexecpt=False)
casatools.utils.setconstraints(self, xmldescriptor='')
casatools.utils.verifyparam(self, param='')
casatools.utils.expandparam(self, name='', value='')
casatools.utils.torecord(self, input='')
casatools.utils.toxml(self, input='', asfile=False, filename='recordas.xml')
casatools.utils.getrc(self, rcvar='')
casatools.utils.removetable(self, tablenames=[''])
casatools.utils.tableinfo(self, tablename='')
casatools.utils.lockedtables(self)
casatools.utils.hostinfo(self)
casatools.utils.c_exception(self)
casatools.utils.c_exception_clear(self)
casatools.utils.initialize(self, default_path='')
casatools.utils.defaultpath(self)
casatools.utils.setpath(self, dirs=[''])
casatools.utils.getpath(self)
casatools.utils.clearpath(self)
casatools.utils.resolve(self, path='')
casatools.utils.registry(self)
casatools.utils.services(self)
casatools.utils.shutdown(self)
casatools.utils.version(self)
casatools.utils.version_variant(self)
casatools.utils.version_desc(self)
casatools.utils.version_info(self)
casatools.utils.version_string(self)
casatools.utils.compare_version(self, comparitor='', vec='')
casatools.utils.toolversion(self)
casatools.utils.toolversion_string(self)
casatools.regionmanager.regionmanager(self)
casatools.regionmanager.absreltype(self, absrelvalue=0)
casatools.regionmanager.box(self, blc=[0], trc=[-1], inc=[1], absrel='relref', frac=False, comment='')
casatools.regionmanager.frombcs(self, csys='', shape=[0], box='', chans='', stokes='', stokescontrol='a', region='')
casatools.regionmanager.complement(self, region='', comment='')
casatools.regionmanager.concatenation(self, box='', regions='', comment='')
casatools.regionmanager.deletefromtable(self, tablename='', regionname='')
casatools.regionmanager.difference(self, region1='', region2='', comment='')
casatools.regionmanager.done(self)
casatools.regionmanager.selectedchannels(self, specification='', shape=[0])
casatools.regionmanager.fromtextfile(self, filename='', shape=[0], csys='')
casatools.regionmanager.fromtext(self, text='', shape=[1], csys='')
casatools.regionmanager.fromfiletorecord(self, filename='', verbose=True, regionname='')
casatools.regionmanager.tofile(self, filename='', region='')
casatools.regionmanager.fromrecordtotable(self, tablename='', regionname='', regionrec='', asmask=False, verbose=True)
casatools.regionmanager.fromtabletorecord(self, tablename='', regionname='', verbose=True)
casatools.regionmanager.intersection(self, regions='', comment='')
casatools.regionmanager.ispixelregion(self, region='')
casatools.regionmanager.isworldregion(self, region='')
casatools.regionmanager.namesintable(self, tablename='')
casatools.regionmanager.setcoordinates(self, csys='')
casatools.regionmanager.makeunion(self, regions='', comment='')
casatools.regionmanager.wbox(self, blc='', trc='', pixelaxes=[-1], csys='', absrel='abs', comment='')
casatools.regionmanager.wpolygon(self, x='', y='', pixelaxes=[-1], csys='', absrel='abs', comment='')
casatools.singledishms.singledishms(self)
casatools.singledishms.open(self, )
casatools.singledishms.close(self)
casatools.singledishms.done(self)
casatools.singledishms.name(self)
casatools.singledishms.subtract_baseline(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', blfunc='poly', order=5, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0])
casatools.singledishms.subtract_baseline_cspline(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', npiece=5, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0])
casatools.singledishms.subtract_baseline_sinusoid(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', addwn='0', rejwn='', applyfft=False, fftmethod='fft', fftthresh='3.0', clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0])
casatools.singledishms.subtract_baseline_variable(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', verbose=False)
casatools.singledishms.apply_baseline_table(self, bltable='', datacolumn='data', spw='', updateweight=False, sigmavalue='stddev', outfile='')
casatools.singledishms.fit_line(self, datacolumn='data', spw='', pol='', timebin='', timespan='', polaverage='', fitfunc='gaussian', nfit='0', linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0], tempfile='', tempoutfile='')
casatools.singledishms.set_selection(self, spw='', field='', antenna='', timerange='', scan='', observation='', polarization='', beam='', intent='', feed='', taql='', reindex=True)
casatools.singledishms.smooth(self, type='gaussian', width=0.0, datacolumn='data', outfile='')
casatools.singledishms.atmcor(self, config='', datacolumn='data', outfile='')
casatools.singledishms.importasap(self, infile='', outfile='', parallel=False)
casatools.singledishms.importnro(self, infile='', outfile='', parallel=False)
casatools.linearmosaic.linearmosaic(self)
casatools.linearmosaic.defineoutputimage(self, nx=128, ny=-1, cellx='1.0', celly='', imagecenter='0', outputimage='', outputweight='')
casatools.linearmosaic.setoutputimage(self, outputimage='', outputweight='', imageweighttype=1, weighttype=1)
casatools.linearmosaic.saultweightimage(self, outputimage='', fracpeak=0.1)
casatools.linearmosaic.setlinmostype(self, linmostype='optimal')
casatools.linearmosaic.makemosaic(self, images='', weightimages='', imageweighttype=1, weighttype=1)
casatools.imager.imager(self)
casatools.imager.advise(self, takeadvice=True, amplitudeloss=0.05, fieldofview='1.0deg')
casatools.imager.advisechansel(self, freqstart=1.0e6, freqend=1.1e6, freqstep=100.0, freqframe='LSRK', msname='', fieldid=0, getfreqrange=False, spwselection='')
casatools.imager.approximatepsf(self, psf='')
casatools.imager.boxmask(self, mask='', blc=[0, 0, 0, 0], trc=[], value=1.0)
casatools.imager.calcuvw(self, fields=[-1], refcode='', reuse=True)
casatools.imager.clean(self, algorithm='clark', niter=1000, gain=0.1, threshold='0.0Jy', displayprogress=False, model=[''], keepfixed=[False], complist='', mask=[''], image=[''], residual=[''], psfimage=[''], interactive=False, npercycle=100, masktemplate='')
casatools.imager.clipimage(self, image='', threshold='0.0Jy')
casatools.imager.clipvis(self, threshold='0.0Jy')
casatools.imager.close(self)
casatools.imager.defineimage(self, nx=128, ny=-1, cellx='1.0', celly='', stokes='IV', phasecenter='0', mode='frequency', nchan=-1, start='0', step='1', spw=[0], restfreq='', outframe='LSRK', veltype='optical', facets=1, movingsource='', distance='0.0', projection='SIN')
casatools.imager.done(self)
casatools.imager.drawmask(self, image='', mask='', niter=0, npercycle=0, threshold='0 mJy')
casatools.imager.exprmask(self, mask='', expr=1.0)
casatools.imager.feather(self, image='', highres='', lowres='', lowpsf='', effdishdiam=-1.0, lowpassfiltersd=False)
casatools.imager.filter(self, type='gaussian', bmaj='1arcsec', bmin='1arcsec', bpa='0deg')
casatools.imager.fitpsf(self, psf='')
casatools.imager.fixvis(self, fields=[-1], phasedirs=[''], refcode='', distances=[0.0], datacolumn='all')
casatools.imager.ft(self, model=[''], complist='', incremental=False, phasecentertime=-1.0)
casatools.imager.getweightgrid(self, type='imaging', wgtimages=[''])
casatools.imager.linearmosaic(self, images=[''], mosaic='', fluxscale='', sensitivity='', fieldids=[0], usedefaultvp=True, vptable='')
casatools.imager.make(self, image='')
casatools.imager.predictcomp(self, objname='', standard='', epoch='55555.0d', freqs=[1.0e11], pfx='predictcomp')
casatools.imager.makeimage(self, type='observed', image='', compleximage='', verbose=True)
casatools.imager.makemodelfromsd(self, sdimage='', modelimage='', sdpsf='', maskimage='')
casatools.imager.mask(self, image='', mask='', threshold='0.0Jy')
casatools.imager.mem(self, algorithm='entropy', niter=20, sigma='0.001Jy', targetflux='1.0Jy', constrainflux=False, displayprogress=False, model=[''], keepfixed=[False], complist='', prior=[''], mask=[''], image=[''], residual=[''])
casatools.imager.nnls(self, model=[''], keepfixed=[False], complist='', niter=0, tolerance=1e-06, fluxmask=[''], datamask=[''], image=[''], residual=[''])
casatools.imager.open(self, thems='', compress=False, usescratch=False)
casatools.imager.pb(self, inimage='', outimage='', incomps='', outcomps='', operation='correct', pointingcenter='', parangle='0.0deg', pborvp='vb')
casatools.imager.plotsummary(self)
casatools.imager.plotuv(self, rotate=False)
casatools.imager.plotvis(self, type='all', increment=1)
casatools.imager.plotweights(self, gridded=False, increment=1)
casatools.imager.regionmask(self, mask='', region='', boxes='', circles='', value=1.0)
casatools.imager.regiontoimagemask(self, mask='', region='', boxes='', circles='', value=1.0)
casatools.imager.residual(self, model=[''], complist='', image=[''])
casatools.imager.restore(self, model=[''], complist='', image=[''], residual=[''])
casatools.imager.updateresidual(self, model=[''], complist='', image=[''], residual=[''])
casatools.imager.sensitivity(self)
casatools.imager.apparentsens(self)
casatools.imager.setbeam(self, bmaj='1.0arcsec', bmin='1.0arcsec', bpa='0deg')
casatools.imager.selectvis(self, vis='', nchan=[-1], start=[0], step=[1], spw='-1', field='-1', baseline='-1', time='', scan='', intent='', observation='', uvrange='', taql='', usescratch=False, datainmemory=False, writeaccess=True)
casatools.imager.setjy(self, field='', spw='', modimage='', fluxdensity=[0.0, 0.0, 0.0, 0.0], standard='Baars', scalebychan=False, spix=[0.0], reffreq='1GHz', polindex=[0.0], polangle=[0.0], rotmeas=0.0, time='', scan='', intent='', observation='', interpolation='nearest')
casatools.imager.ssoflux(self)
casatools.imager.setmfcontrol(self, cyclefactor=1.5, cyclespeedup=-1, cyclemaxpsffraction=0.8, stoplargenegatives=2, stoppointmode=-1, minpb=0.1, scaletype='SAULT', constpb=0.4, fluxscale=[''], flatnoise=True)
casatools.imager.setoptions(self, ftmachine='ft', cache=-1, tile=16, gridfunction='SF', location='', padding=1.0, freqinterp='nearest', wprojplanes=-1, epjtablename='', applypointingoffsets=False, dopbgriddingcorrections=True, cfcachedirname='', rotpastep=5.0, pastep=360.0, pblimit=0.05, imagetilevol=0, singleprecisiononly=False, numthreads=-1, psterm=True, aterm=True, mterm=True, wbawp=False, conjbeams=True)
casatools.imager.setscales(self, scalemethod='nscales', nscales=5, uservector=[0.0, 3.0, 10.0])
casatools.imager.setsmallscalebias(self, inbias=0.6)
casatools.imager.settaylorterms(self, ntaylorterms=2, reffreq=0.0)
casatools.imager.setsdoptions(self, scale=1.0, weight=1.0, convsupport=-1, pointingcolumntouse='DIRECTION', truncate='-1pixel', gwidth='-1pixel', jwidth='-1pixel', minweight=0., clipminmax=False)
casatools.imager.setvp(self, dovp=False, usedefaultvp=True, vptable='', dosquint=False, parangleinc='360deg', skyposthreshold='180deg', telescope='', verbose=True)
casatools.imager.setweightgrid(self, weight='', type='imaging')
casatools.imager.smooth(self, model=[''], image=[''], usefit=True, bmaj='5.arcsec', bmin='5.arcsec', bpa='0deg', normalize=True)
casatools.imager.stop(self)
casatools.imager.summary(self)
casatools.imager.uvrange(self, uvmin=0.0, uvmax=0.0)
casatools.imager.weight(self, type='natural', rmode='norm', noise='0.0Jy', robust=0.0, fieldofview='0.0arcsec', npixels=0, mosaic=False)
casatools.imager.mapextent(self, ref='J2000', movingsource='', pointingcolumntouse='DIRECTION')
casatools.imager.pointingsampling(self, pattern='raster', ref='J2000', movingsource='', pointingcolumntouse='DIRECTION', antenna='')
casatools.simulator.simulator(self)
casatools.simulator.open(self, ms='')
casatools.simulator.openfromms(self, ms='')
casatools.simulator.close(self)
casatools.simulator.done(self)
casatools.simulator.name(self)
casatools.simulator.summary(self)
casatools.simulator.type(self)
casatools.simulator.settimes(self, integrationtime='10s', usehourangle=True, referencetime='50000.0d')
casatools.simulator.observe(self, sourcename='', spwname='', starttime='0s', stoptime='3600s', add_observation=False, state_sig=True, state_ref=False, state_cal=0.0, state_load=0.0, state_sub_scan=0, state_obs_mode='OBSERVE_TARGET.ON_SOURCE', observer='CASA simulator', project='CASA simulation')
casatools.simulator.observemany(self, sourcenames=[''], spwname='', starttimes=['0s'], stoptimes=['3600s'], directions=[''], add_observation=False, state_sig=True, state_ref=False, state_cal=0.0, state_load=0.0, state_sub_scan=0, state_obs_mode='OBSERVE\_TARGET#ON\_SOURCE', observer='CASA simulator', project='CASA simulation')
casatools.simulator.setlimits(self, shadowlimit=1e-6, elevationlimit='10deg')
casatools.simulator.setauto(self, autocorrwt=0.0)
casatools.simulator.setconfig(self, telescopename='VLA', x=[0], y=[0], z=[0], dishdiameter=[0], offset=[0], mount=['ALT-AZ'], antname=['A'], padname=['P'], coordsystem='global', referencelocation='ALMA')
casatools.simulator.setfeed(self, mode='', x=[0], y=[0], pol=['R'])
casatools.simulator.setfield(self, sourcename='SOURCE', sourcedirection='', calcode='', distance='0m')
casatools.simulator.setmosaicfield(self, sourcename='SOURCE', calcode='', fieldcenter='', xmosp=1, ymosp=1, mosspacing='1arcsec', distance='0m')
casatools.simulator.setspwindow(self, spwname='XBAND', freq='8.0e9Hz', deltafreq='50e6Hz', freqresolution='50.e6Hz', refcode='TOPO', nchannels=1, stokes='RR LL')
casatools.simulator.setdata(self, spwid=[0], fieldid=[0], msselect='')
casatools.simulator.predict(self, imagename=[''], complist='', incremental=False)
casatools.simulator.setoptions(self, ftmachine='ft', cache=0, tile=16, gridfunction='SF', location='ALMA', padding=1.3, facets=1, maxdata=2000.0, wprojplanes=1)
casatools.simulator.setvp(self, dovp=True, usedefaultvp=True, vptable='', dosquint=True, parangleinc='360deg', skyposthreshold='180deg', pblimit=1.0e-2)
casatools.simulator.corrupt(self)
casatools.simulator.reset(self)
casatools.simulator.setbandpass(self, mode='calculate', table='', interval='3600s', amplitude=[0.0])
casatools.simulator.setapply(self, table='', type='B', t=0.0, field='', interp='aipslin', calwt=False, spwmap=[-1], opacity=0.0)
casatools.simulator.setgain(self, mode='fbm', table='', interval='10s', amplitude=[0.01])
casatools.simulator.settrop(self, mode='screen', table='', pwv=3.0, deltapwv=0.15, beta=1.1, windspeed=7.)
casatools.simulator.setpointingerror(self, epjtablename='', applypointingoffsets=False, dopbcorrection=False)
casatools.simulator.setleakage(self, mode='constant', table='', amplitude=[0.01], offset=[0.])
casatools.simulator.oldsetnoise(self, mode='calculate', table='', simplenoise='0.0Jy', antefficiency=0.8, correfficiency=0.85, spillefficiency=0.85, tau=0.1, trx=50, tatmos=230.0, tcmb=2.7)
casatools.simulator.setnoise(self, mode='simplenoise', table='', simplenoise='0.1Jy', pground='560mbar', relhum=20.0, altitude='5000m', waterheight='200m', pwv='1mm', tatmos=250.0, tau=0.1, antefficiency=0.8, spillefficiency=0.85, correfficiency=0.88, trx=50, tground=270.0, tcmb=2.73, OTF=True, senscoeff=0., rxtype=0)
casatools.simulator.setpa(self, mode='calculate', table='', interval='10s')
casatools.simulator.setseed(self, seed=185349251)
casatools.measures.measures(self)
casatools.measures.dirshow(self, v='')
casatools.measures.show(self, v='', refcode=True)
casatools.measures.epoch(self, rf='UTC', v0='', off='')
casatools.measures.direction(self, rf='J2000', v0='', v1='', off='')
casatools.measures.getvalue(self, v='')
casatools.measures.gettype(self, v='')
casatools.measures.getref(self, v='')
casatools.measures.getoffset(self, v='')
casatools.measures.cometname(self)
casatools.measures.comettype(self)
casatools.measures.cometdist(self)
casatools.measures.cometangdiam(self)
casatools.measures.comettopo(self)
casatools.measures.framecomet(self, v='')
casatools.measures.position(self, rf='WGS84', v0='', v1='', v2='', off='')
casatools.measures.observatory(self, name='ALMA')
casatools.measures.obslist(self)
casatools.measures.linelist(self)
casatools.measures.spectralline(self, name='HI')
casatools.measures.sourcelist(self)
casatools.measures.source(self, name='1934-638')
casatools.measures.frequency(self, rf='LSRK', v0='', off='')
casatools.measures.doppler(self, rf='RADIO', v0='', off='')
casatools.measures.radialvelocity(self, rf='LSRK', v0='', off='')
casatools.measures.shift(self, v='', offset='0deg', pa='0deg')
casatools.measures.uvw(self, rf='ITRF', v0='', v1='', v2='', off='')
casatools.measures.touvw(self, v='')
casatools.measures.expand(self, v='')
casatools.measures.earthmagnetic(self, rf='IGRF', v0='', v1='', v2='', off='')
casatools.measures.baseline(self, rf='ITRF', v0='', v1='', v2='', off='')
casatools.measures.asbaseline(self, pos='')
casatools.measures.listcodes(self, ms='')
casatools.measures.measure(self, v='', rf='', off='')
casatools.measures.doframe(self, v='')
casatools.measures.framenow(self)
casatools.measures.showframe(self)
casatools.measures.toradialvelocity(self, rf='', v0='')
casatools.measures.tofrequency(self, rf='', v0='', rfq='')
casatools.measures.todoppler(self, rf='', v0='', rfq='')
casatools.measures.torestfrequency(self, v0='', d0='')
casatools.measures.rise(self, crd='', ev='0.0deg')
casatools.measures.riseset(self, crd='', ev='0.0deg')
casatools.measures.posangle(self, m1='', m2='')
casatools.measures.separation(self, m1='', m2='')
casatools.measures.addxvalue(self, a='')
casatools.measures.type(self)
casatools.measures.done(self)
casatools.measures.ismeasure(self, v='')
casatools.image.image(self)
casatools.image.newimage(self, infile='')
casatools.image.newimagefromfile(self, infile='')
casatools.image.imagecalc(self, outfile='', pixels='', overwrite=False, imagemd='', prec='float')
casatools.image.collapse(self, function='', axes='0', outfile='', region='', box='', chans='', stokes='', mask='', overwrite=False, stretch=False)
casatools.image.decimate(self, outfile='', axis=0, factor=1, method='copy', region='', mask='', overwrite=False, stretch=False)
casatools.image.dohistory(self, enable=True)
casatools.image.imageconcat(self, outfile='', infiles='', axis=-1, relax=False, tempclose=True, overwrite=False, reorder=False, mode='paged')
casatools.image.fromarray(self, outfile='', pixels='', csys='', linear=False, overwrite=False, log=True, type='f')
casatools.image.fromcomplist(self, outfile='', shape=[''], cl='', csys='', overwrite=False, log=True, cache=True)
casatools.image.fromfits(self, outfile='', infile='', whichrep=0, whichhdu=0, zeroblanks=False, overwrite=False)
casatools.image.fromimage(self, outfile='', infile='', region='', mask='', dropdeg=False, overwrite=False)
casatools.image.fromshape(self, outfile='', shape=[0], csys='', linear=False, overwrite=False, log=True, type='f')
casatools.image.maketestimage(self, outfile='', overwrite=False)
casatools.image.deviation(self, outfile='', region='', mask='', overwrite=False, stretch=False, grid=[1, 1], anchor='ref', xlength='1pix', ylength='1pix', interp='cubic', stattype='sigma', statalg='classic', zscore=-1, maxiter=-1)
casatools.image.adddegaxes(self, outfile='', direction=False, spectral=False, stokes='', linear=False, tabular=False, overwrite=False, silent=False)
casatools.image.addnoise(self, type='normal', pars=[0.0, 1.0], region='', zero=False, seeds=[''])
casatools.image.convolve(self, outfile='', kernel='', scale=-1.0, region='', mask='', overwrite=False, stretch=False)
casatools.image.boundingbox(self, region='')
casatools.image.boxcar(self, outfile='', region='', mask='', axis=-1, width=2, drop=True, dmethod='copy', overwrite=False, stretch=False)
casatools.image.brightnessunit(self)
casatools.image.calc(self, pixels='', verbose=True)
casatools.image.calcmask(self, mask='', name='', asdefault=True)
casatools.image.close(self)
casatools.image.continuumsub(self, outline='', outcont='continuumsub.im', region='', channels=[-1], pol='', fitorder=0, overwrite=False)
casatools.image.convertflux(self, value='0Jy/beam', major='1arcsec', minor='1arcsec', type='Gaussian', topeak=True, channel=-1, polarization=-1)
casatools.image.convolve2d(self, outfile='', axes=[0, 1], type='gaussian', major='0deg', minor='0deg', pa='0deg', scale=-1, region='', mask='', overwrite=False, stretch=False, targetres=False, beam='')
casatools.image.coordsys(self, axes=[-1])
casatools.image.coordmeasures(self, pixel=[-1], dframe='cl', sframe='cl')
casatools.image.decompose(self, region='', mask='', simple=False, threshold=-1, ncontour=11, minrange=1, naxis=2, fit=True, maxrms=-1, maxretry=-1, maxiter=256, convcriteria=0.0001, stretch=False)
casatools.image.deconvolvecomponentlist(self, complist='', channel=-1, polarization=-1)
casatools.image.deconvolvefrombeam(self, source='', beam='')
casatools.image.beamforconvolvedsize(self, source='', convolved='')
casatools.image.commonbeam(self)
casatools.image.remove(self, done=False, verbose=True)
casatools.image.removefile(self, file='')
casatools.image.done(self, remove=False, verbose=True)
casatools.image.fft(self, real='', imag='', amp='', phase='', axes=[-1], region='', mask='', stretch=False, complex='')
casatools.image.findsources(self, nmax=20, cutoff=0.1, region='', mask='', point=True, width=5, negfind=False)
casatools.image.fitprofile(self, box='', region='', chans='', stokes='', axis=-1, mask='', ngauss=1, poly=-1, estimates='', minpts=1, multifit=False, model='', residual='', amp='', amperr='', center='', centererr='', fwhm='', fwhmerr='', integral='', integralerr='', stretch=False, logresults=True, pampest='', pcenterest='', pfwhmest='', pfix='', gmncomps=0, gmampcon='', gmcentercon='', gmfwhmcon='', gmampest=[0.0], gmcenterest=[0.0], gmfwhmest=[0.0], gmfix='', spxtype='', spxest=[''], spxfix=[''], div='0', spxsol='', spxerr='', logfile='', append=True, pfunc='', goodamprange=[0.0], goodcenterrange=[0.0], goodfwhmrange=[0.0], sigma='', outsigma='', planes=[''])
casatools.image.fitcomponents(self, box='', region='', chans='', stokes='', mask='', includepix=[-1], excludepix=[-1], residual='', model='', estimates='', logfile='', append=True, newestimates='', complist='', overwrite=False, dooff=False, offset=0.0, fixoffset=False, stretch=False, rms='', noisefwhm='', summary='')
casatools.image.fromrecord(self, record='', outfile='')
casatools.image.getchunk(self, blc=[-1], trc=[-1], inc=[1], axes=[-1], list=False, dropdeg=False, getmask=False)
casatools.image.getregion(self, region='', axes=[-1], mask='', list=False, dropdeg=False, getmask=False, stretch=False)
casatools.image.getprofile(self, axis=-1, function='mean', region='', mask='', unit='', stretch=False, spectype='default', restfreq='', frame='', logfile='')
casatools.image.getslice(self, x='', y='', axes=[0, 1], coord=[-1], npts=0, method='linear')
casatools.image.hanning(self, outfile='', region='', mask='', axis=-10, drop=True, overwrite=False, stretch=False, dmethod='copy')
casatools.image.haslock(self)
casatools.image.histograms(self, axes=[-1], region='', mask='', nbins=25, includepix=[-1], cumu=False, log=False, stretch=False)
casatools.image.history(self, list=True)
casatools.image.insert(self, infile='', region='', locate=[-1], verbose=False)
casatools.image.isopen(self)
casatools.image.ispersistent(self)
casatools.image.lock(self, writelock=False, nattempts=0)
casatools.image.makecomplex(self, outfile='', imag='', region='', overwrite=False)
casatools.image.maskhandler(self, op='default', name=[''])
casatools.image.miscinfo(self)
casatools.image.modify(self, model='', region='', mask='', subtract=True, list=True, stretch=False)
casatools.image.maxfit(self, region='', point=True, width=5, negfind=False, list=True)
casatools.image.moments(self, moments=[0], axis=-10, region='', mask='', method=[''], smoothaxes=[-1], smoothtypes='', smoothwidths=[0.0], includepix=[-1], excludepix=[-1], peaksnr=3.0, stddev=0.0, doppler='RADIO', outfile='', smoothout='', overwrite=False, drop=True, stretch=False)
casatools.image.name(self, strippath=False)
casatools.image.open(self, cache=True)
casatools.image.pad(self, outfile='', npixels=1, value=0, padmask=False, overwrite=False, region='', box='', chans='', stokes='', mask='', stretch=False, wantreturn=True)
casatools.image.crop(self, outfile='', axes=[''], overwrite=False, region='', box='', chans='', stokes='', mask='', stretch=False, wantreturn=True)
casatools.image.pixelvalue(self, pixel=[-1])
casatools.image.putchunk(self, pixels='', blc=[-1], inc=[1], list=False, locking=True, replicate=False)
casatools.image.putregion(self, pixels='', pixelmask='', region='', list=False, usemask=True, locking=True, replicate=False)
casatools.image.rebin(self, outfile='', bin='', region='', mask='', dropdeg=False, overwrite=False, stretch=False, crop=False)
casatools.image.regrid(self, outfile='', shape=[-1], csys='', axes=[-1], region='', mask='', method='linear', decimate=10, replicate=False, doref=True, dropdeg=False, overwrite=False, force=False, asvelocity=False, stretch=False)
casatools.image.transpose(self, outfile='', order='')
casatools.image.rotate(self, outfile='', shape=[-1], pa='0deg', region='', mask='', method='cubic', decimate=0, replicate=False, dropdeg=False, overwrite=False, stretch=False)
casatools.image.rotatebeam(self, angle='0deg')
casatools.image.rename(self, name='', overwrite=False)
casatools.image.replacemaskedpixels(self, pixels='', region='', mask='', update=False, list=False, stretch=False)
casatools.image.beamarea(self, channel=-1, polarization=-1)
casatools.image.restoringbeam(self, channel=-1, polarization=-1)
casatools.image.sepconvolve(self, outfile='', axes=[-1], types=[''], widths='', scale=-1, region='', mask='', overwrite=False, stretch=False)
casatools.image.set(self, pixels='', pixelmask=-1, region='', list=False)
casatools.image.setbrightnessunit(self, unit='')
casatools.image.setcoordsys(self, csys='')
casatools.image.sethistory(self, origin='', history=[''])
casatools.image.setmiscinfo(self, info='')
casatools.image.shape(self)
casatools.image.setrestoringbeam(self, major='1arcsec', minor='1arcsec', pa='0deg', beam='', remove=False, log=True, channel=-1, polarization=-1, imagename='')
casatools.image.statistics(self, axes=[-1], region='', mask='', includepix=[-1], excludepix=[-1], list=False, force=False, disk=False, robust=False, verbose=False, stretch=False, logfile='', append=True, algorithm='classic', fence=-1, center='mean', lside=True, zscore=-1, maxiter=-1, clmethod='auto', niter=3)
casatools.image.twopointcorrelation(self, outfile='', region='', mask='', axes=[-1], method='structurefunction', overwrite=False, stretch=False)
casatools.image.subimage(self, outfile='', region='', mask='', dropdeg=False, overwrite=False, list=True, stretch=False, wantreturn=True, keepaxes=[''])
casatools.image.summary(self, doppler='RADIO', list=True, pixelorder=True, verbose=False)
casatools.image.tofits(self, outfile='', velocity=False, optical=True, bitpix=-32, minpix=1, maxpix=-1, region='', mask='', overwrite=False, dropdeg=False, deglast=False, dropstokes=False, stokeslast=True, wavelength=False, airwavelength=False, stretch=False, history=True)
casatools.image.torecord(self)
casatools.image.type(self)
casatools.image.topixel(self, value='')
casatools.image.toworld(self, value='', format='n', dovelocity=True)
casatools.image.unlock(self)
casatools.image.newimagefromarray(self, outfile='', pixels='', csys='', linear=False, overwrite=False, log=True, type='f')
casatools.image.newimagefromfits(self, outfile='', infile='', whichrep=0, whichhdu=0, zeroblanks=False, overwrite=False)
casatools.image.newimagefromimage(self, infile='', outfile='', region='', mask='', dropdeg=False, overwrite=False)
casatools.image.newimagefromshape(self, outfile='', shape=[0], csys='', linear=False, overwrite=False, log=True, type='f')
casatools.image.pbcor(self, pbimage='', outfile='', overwrite=False, box='', region='', chans='', stokes='', mask='', mode='divide', cutoff=-1.0, stretch=False)
casatools.image.pixeltype(self)
casatools.image.pv(self, outfile='', start='', end='', center='', length='', pa='', width='1', unit='arcsec', overwrite=False, region='', chans='', stokes='', mask='', stretch=False, wantreturn=True)
casatools.image.makearray(self, v=0.0, shape=[0])
casatools.image.isconform(self, other='')
casatools.quanta.quanta(self)
casatools.quanta.convertfreq(self, v='1.0', outunit='Hz')
casatools.quanta.convertdop(self, v='0.0', outunit='km/s')
casatools.quanta.quantity(self, v='', unitname='')
casatools.quanta.getvalue(self, v='')
casatools.quanta.getunit(self, v='')
casatools.quanta.canonical(self, v='1.0')
casatools.quanta.canon(self, v='')
casatools.quanta.convert(self, v='', outunit='')
casatools.quanta.define(self, name='', v='1')
casatools.quanta.map(self, v='all')
casatools.quanta.maprec(self, v='all')
casatools.quanta.fits(self)
casatools.quanta.angle(self, v='', prec=0, form=[''], showform=False)
casatools.quanta.time(self, v='', prec=0, form=[''], showform=False)
casatools.quanta.add(self, v='', a='0')
casatools.quanta.sub(self, v='', a='0')
casatools.quanta.mul(self, v='', a='1')
casatools.quanta.div(self, v='', a='1')
casatools.quanta.neg(self, v='1')
casatools.quanta.norm(self, v='', a=-0.5)
casatools.quanta.le(self, v='', a='0')
casatools.quanta.lt(self, v='', a='0')
casatools.quanta.eq(self, v='', a='0')
casatools.quanta.ne(self, v='', a='0')
casatools.quanta.gt(self, v='', a='0')
casatools.quanta.ge(self, v='', a='0')
casatools.quanta.sin(self, v='')
casatools.quanta.cos(self, v='')
casatools.quanta.tan(self, v='')
casatools.quanta.asin(self, v='')
casatools.quanta.acos(self, v='')
casatools.quanta.atan(self, v='')
casatools.quanta.atan2(self, v='', a='')
casatools.quanta.abs(self, v='')
casatools.quanta.ceil(self, v='')
casatools.quanta.floor(self, v='')
casatools.quanta.log(self, v='')
casatools.quanta.log10(self, v='')
casatools.quanta.exp(self, v='')
casatools.quanta.sqrt(self, v='')
casatools.quanta.compare(self, v='', a='')
casatools.quanta.check(self, v='')
casatools.quanta.checkfreq(self, cm='')
casatools.quanta.pow(self, v='', a=1)
casatools.quanta.constants(self, v='pi')
casatools.quanta.isangle(self, v='')
casatools.quanta.totime(self, v='')
casatools.quanta.toangle(self, v='')
casatools.quanta.splitdate(self, v='')
casatools.quanta.tos(self, v='', prec=9)
casatools.quanta.type(self)
casatools.quanta.done(self, kill=False)
casatools.quanta.unit(self, v='', unitname='')
casatools.quanta.isquantity(self, v='')
casatools.quanta.setformat(self, t='', v='F')
casatools.quanta.getformat(self, t='')
casatools.quanta.formxxx(self, v='', format='dms', prec=2)
casatools.ms.ms(self)
casatools.ms.open(self, thems='', nomodify=True, lock=False, check=False)
casatools.ms.reset(self)
casatools.ms.close(self)
casatools.ms.done(self)
casatools.ms.name(self)
casatools.ms.iswritable(self)
casatools.ms.nrow(self, selected=False)
casatools.ms.getdata(self, items=[''], ifraxis=False, ifraxisgap=0, increment=1, average=False)
casatools.ms.putdata(self, items='')
casatools.ms.fromfits(self, msfile='', fitsfile='', nomodify=True, lock=False, obstype=0, host='', forcenewserver=False, antnamescheme='old')
casatools.ms.fromfitsidi(self, msfile='', fitsfile='', nomodify=True, lock=False, obstype=0)
casatools.ms.tofits(self, fitsfile='', column='corrected', field='', spw='', baseline='', time='', scan='', uvrange='', taql='', writesyscal=False, multisource=False, combinespw=False, writestation=False, padwithflags=False, overwrite=False)
casatools.ms.listfits(self, fitsfile='')
casatools.ms.asdmref(self, abspath='')
casatools.ms.concatenate(self, msfile='', freqtol='1Hz', dirtol='1mas', weightscale=1., handling=0, destmsfile='', respectname=False)
casatools.ms.testconcatenate(self, msfile='', freqtol='1Hz', dirtol='1mas', respectname=False)
casatools.ms.virtconcatenate(self, msfile='', auxfilename='', freqtol='1Hz', dirtol='1mas', weightscale=1., respectname=True)
casatools.ms.createmultims(self, outputTableName='', tables='', subtables='', nomodify=True, lock=False, copysubtables=False, omitsubtables=[''])
casatools.ms.ismultims(self)
casatools.ms.split(self, outputms='', field='', spw='*', step=[1], baseline='', timebin='-1s', time='', scan='', uvrange='', taql='', whichcol='DATA', tileshape='', subarray='', combine='', correlation='', intent='', obs='')
casatools.ms.partition(self, outputms='', field='', spw='*', baseline='', timebin='-1s', time='', scan='', uvrange='', taql='', whichcol='DATA', tileshape='', subarray='', combine='', intent='', obs='')
casatools.ms.summary(self, verbose=False, listfile='', listunfl=False, cachesize=50, overwrite=False, wantreturn=True)
casatools.ms.getscansummary(self)
casatools.ms.getspectralwindowinfo(self)
casatools.ms.getreferencedtables(self)
casatools.ms.getfielddirmeas(self, dircolname='PHASE_DIR', fieldid=0, time=0, format='measure')
casatools.ms.listhistory(self)
casatools.ms.writehistory(self, message='', parms='', origin='MSHistoryHandler::addMessage()', msname='', app='ms')
casatools.ms.writehistory_batch(self, messages=[''], parms='', origin='MSHistoryHandler::addMessage()', msname='', app='ms')
casatools.ms.statistics(self, column='', complex_value='', useflags=True, useweights=False, spw='', field='', baseline='', uvrange='', time='', correlation='', scan='', intent='', array='', obs='', reportingaxes='', timeaverage=False, timebin='0s', timespan='', maxuvwdistance=0.0, doquantiles=True)
casatools.ms.statisticsold(self, column='', complex_value='', useflags=True, spw='', field='', baseline='', uvrange='', time='', correlation='', scan='', array='', obs='')
casatools.ms.range(self, items=[''], useflags=True, blocksize=10)
casatools.ms.lister(self, options='', datacolumn='data', field='', spw='', antenna='', timerange='', correlation='', scan='', feed='', array='', observation='', uvrange='', average='', showflags=False, msselect='', pagerows=50, listfile='')
casatools.ms.metadata(self, cachesize=50)
casatools.ms.msselect(self, items='', onlyparse=False)
casatools.ms.msselectedindices(self)
casatools.ms.msseltoindex(self, vis='', spw='', field='', baseline='', time='', scan='', uvrange='', observation='', polarization='', taql='')
casatools.ms.selectinit(self, datadescid=0, reset=False)
casatools.ms.select(self, items='')
casatools.ms.selecttaql(self, msselect='')
casatools.ms.selectchannel(self, nchan=1, start=0, width=1, inc=1)
casatools.ms.selectpolarization(self, wantedpol=[''])
casatools.ms.statwt(self, combine='', timebin='1', slidetimebin=False, chanbin='spw', minsamp=2, statalg='classic', fence=-1, center='mean', lside=True, zscore=-1, maxiter=-1, fitspw='', excludechans=False, wtrange=[''], preview=False, datacolumn='corrected')
casatools.ms.oldstatwt(self, dorms=False, byantenna=True, sepacs=True, fitspw='*', fitcorr='', combine='', timebin='0s', minsamp=3, field='', spw='*', antenna='', timerange='', scan='', intent='', array='', correlation='', obs='', datacolumn='corrected_data')
casatools.ms.regridspw(self, outframe='LSRK', mode='chan', restfreq=-3E30, interpolation='LINEAR', start=-3E30, center=-3E30, bandwidth=-1., chanwidth=-1., hanning=True)
casatools.ms.cvel(self, mode='channel', nchan=-1, start='0', width='1', interp='linear', phasec='', restfreq='1.4GHz', outframe='', veltype='radio', hanning=True)
casatools.ms.hanningsmooth(self, datacolumn='corrected')
casatools.ms.cvelfreqs(self, spwids=[0], fieldids=[0], obstime='', mode='channel', nchan=-1, start='0', width='1', phasec='', restfreq='1.4GHz', outframe='', veltype='radio', verbose=True)
casatools.ms.contsub(self, outputms='', fitspw='*', fitorder=1, combine='', spw='*', unionspw='*', field='', scan='', intent='', correlation='', obs='', whichcol='CORRECTED_DATA')
casatools.ms.continuumsub(self, field='', fitspw='', spw='', solint='int', fitorder=0, mode='subtract')
casatools.ms.uvsub(self, reverse=False)
casatools.ms.addephemeris(self, id=-1, ephemerisname='', comment='', field='')
casatools.ms.timesort(self, newmsname='')
casatools.ms.sort(self, newmsname='', columns=[''])
casatools.ms.iterinit(self, columns=[''], interval=0.0, maxrows=0, adddefaultsortcolumns=True)
casatools.ms.iterorigin(self)
casatools.ms.iternext(self)
casatools.ms.iterend(self)
casatools.ms.ngetdata(self, items=[''], ifraxis=False, ifraxisgap=0, increment=1, average=False)
casatools.ms.niterinit(self, columns=[''], interval=0.0, maxrows=0, adddefaultsortcolumns=True)
casatools.ms.niterorigin(self)
casatools.ms.niternext(self)
casatools.ms.niterend(self)
casatools.ms.nrowold(self, selected=False)
casatools.ms.rangeold(self, items=[''], useflags=True, blocksize=10)
casatools.ms.selectinitold(self, datadescid=0, reset=False)
casatools.ms.selectold(self, items='')
casatools.ms.selecttaqlold(self, msselect='')
casatools.ms.selectchannelold(self, nchan=1, start=0, width=1, inc=1)
casatools.ms.selectpolarizationold(self, wantedpol=[''])
casatools.ms.getdataold(self, items=[''], ifraxis=False, ifraxisgap=0, increment=1, average=False)
casatools.ms.putdataold(self, items='')
casatools.ms.iterinitold(self, columns=[''], interval=0.0, maxrows=0, adddefaultsortcolumns=True)
casatools.ms.iteroriginold(self)
casatools.ms.iternextold(self)
casatools.ms.iterendold(self)
casatools.ms.continuumsubold(self, field='', fitspw='', spw='', solint='int', fitorder=0, mode='subtract')
casatools.calibrater.calibrater(self)
casatools.calibrater.open(self, filename='', compress=False, addcorr=True, addmodel=True)
casatools.calibrater.selectvis(self, time='', spw='', scan='', field='', intent='', observation='', baseline='', uvrange='', chanmode='channel', nchan=1, start=0, step=1, mstart=0.0, mstep=0.0, msselect='')
casatools.calibrater.setmodel(self, modelimage='')
casatools.calibrater.setptmodel(self, stokes=[0.0, 0.0, 0.0, 0.0])
casatools.calibrater.setapply(self, type='B', t=0.0, table='', field='', interp='aipslin', select='', calwt=False, spwmap=[-1], opacity=[0.0])
casatools.calibrater.setcallib(self, callib='')
casatools.calibrater.validatecallib(self, callib='')
casatools.calibrater.setsolve(self, type='G', t='', table='', append=False, preavg=-1.0, phaseonly=False, apmode='AP', refant='', refantmode='flex', minblperant=4, solnorm=False, normtype='median', minsnr=0.0, combine='', fillgaps=0, cfcache='', painc=360.0, fitorder=0, fraction=0.1, numedge=-1, radius='', smooth=True, zerorates=False, globalsolve=True, niter=100, delaywindow=[''], ratewindow=[''], paramactive=[''], solmode='', rmsthresh=[''])
casatools.calibrater.setsolvegainspline(self, table='', append=False, mode='AMP', splinetime=10800, preavg=0.0, npointaver=10, phasewrap=250, refant='')
casatools.calibrater.setsolvebandpoly(self, table='', append=False, t='', combine='', degamp=3, degphase=3, visnorm=False, solnorm=True, maskcenter=0, maskedge=5.0, refant='')
casatools.calibrater.state(self)
casatools.calibrater.reset(self, apply=True, solve=True)
casatools.calibrater.initcalset(self, calset=0)
casatools.calibrater.delmod(self, otf=False, field='', spw='', scr=False)
casatools.calibrater.solve(self)
casatools.calibrater.correct(self, applymode='')
casatools.calibrater.corrupt(self)
casatools.calibrater.initweights(self, wtmode='nyq', dowtsp=False, tsystable='', gainfield='', interp='', spwmap=[''])
casatools.calibrater.fluxscale(self, tablein='', reference='', tableout='', transfer='', listfile='', append=False, refspwmap=[-1], gainthreshold=-1.0, antenna='', timerange='', scan='', incremental=False, fitorder=1, display=False)
casatools.calibrater.accumulate(self, tablein='', incrtable='', tableout='', field='', calfield='', interp='linear', t=-1.0, spwmap=[-1])
casatools.calibrater.activityrec(self)
casatools.calibrater.specifycal(self, caltable='', time='', spw='', antenna='', pol='', caltype='', parameter=[1.0], infile='', uniform=True)
casatools.calibrater.smooth(self, tablein='', tableout='', field='', smoothtype='mean', smoothtime=60.0)
casatools.calibrater.rerefant(self, tablein='', tableout='', refantmode='strict', refant='')
casatools.calibrater.listcal(self, caltable='', field='', antenna='', spw='', listfile='', pagerows=50)
casatools.calibrater.posangcal(self, posangcor='', tablein='', tableout='')
casatools.calibrater.linpolcor(self, tablein='', tableout='', fields=[''])
casatools.calibrater.plotcal(self, antennas='', fields='', spwids='', plottype='1/AMP', tablename='', polarization=1, multiplot=False, nx=1, ny=1, psfile='')
casatools.calibrater.modelfit(self, vary='', niter=0, compshape='P', par=[1.0, 0.0, 0.0], file='')
casatools.calibrater.createcaltable(self, caltable='', partype='', caltype='', singlechan='')
casatools.calibrater.updatecaltable(self, caltable='')
casatools.calibrater.close(self)
casatools.calibrater.done(self)
casatools.calibrater.parsecallibfile(self, filein='')
casatools.calibrater.setcorrdepflags(self, corrdepflags='')
casatools.calibrater.setvi(self, old=False, quiet=False)
casashell.execfile(filename, globals=globals())
casashell.tput(taskname=None, outfile='')
casashell.toolhelp()
casashell.inp(taskname=None)
casashell.doc(topic)
casashell.go(taskname=None)
casashell.saveinputs(taskname=None, outfile=None)
casashell.taskhelp()
casashell.tget(taskname=None, savefile='')
casashell.default(taskname)
