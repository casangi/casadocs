v6.2.0

regionmanager.regionmanager(self)
regionmanager.absreltype(self, absrelvalue=0)
regionmanager.box(self, blc=[0], trc=[-1], inc=[1], absrel='relref', frac=False, comment='')
regionmanager.frombcs(self, csys='', shape=[0], box='', chans='', stokes='', stokescontrol='a', region='')
regionmanager.complement(self, region='', comment='')
regionmanager.concatenation(self, box='', regions='', comment='')
regionmanager.deletefromtable(self, tablename='', regionname='')
regionmanager.difference(self, region1='', region2='', comment='')
regionmanager.done(self)
regionmanager.selectedchannels(self, specification='', shape=[0])
regionmanager.fromtextfile(self, filename='', shape=[0], csys='')
regionmanager.fromtext(self, text='', shape=[1], csys='')
regionmanager.fromfiletorecord(self, filename='', verbose=True, regionname='')
regionmanager.tofile(self, filename='', region='')
regionmanager.fromrecordtotable(self, tablename='', regionname='', regionrec='', asmask=False, verbose=True)
regionmanager.fromtabletorecord(self, tablename='', regionname='', verbose=True)
regionmanager.intersection(self, regions='', comment='')
regionmanager.ispixelregion(self, region='')
regionmanager.isworldregion(self, region='')
regionmanager.namesintable(self, tablename='')
regionmanager.setcoordinates(self, csys='')
regionmanager.makeunion(self, regions='', comment='')
regionmanager.wbox(self, blc='', trc='', pixelaxes=[-1], csys='', absrel='abs', comment='')
regionmanager.wpolygon(self, x='', y='', pixelaxes=[-1], csys='', absrel='abs', comment='')
measures.measures(self)
measures.dirshow(self, v='')
measures.show(self, v='', refcode=True)
measures.epoch(self, rf='UTC', v0='', off='')
measures.direction(self, rf='J2000', v0='', v1='', off='')
measures.getvalue(self, v='')
measures.gettype(self, v='')
measures.getref(self, v='')
measures.getoffset(self, v='')
measures.cometname(self)
measures.comettype(self)
measures.cometdist(self)
measures.cometangdiam(self)
measures.comettopo(self)
measures.framecomet(self, v='')
measures.position(self, rf='WGS84', v0='', v1='', v2='', off='')
measures.observatory(self, name='ALMA')
measures.obslist(self)
measures.linelist(self)
measures.spectralline(self, name='HI')
measures.sourcelist(self)
measures.source(self, name='1934-638')
measures.frequency(self, rf='LSRK', v0='', off='')
measures.doppler(self, rf='RADIO', v0='', off='')
measures.radialvelocity(self, rf='LSRK', v0='', off='')
measures.shift(self, v='', offset='0deg', pa='0deg')
measures.uvw(self, rf='ITRF', v0='', v1='', v2='', off='')
measures.touvw(self, v='')
measures.expand(self, v='')
measures.earthmagnetic(self, rf='IGRF', v0='', v1='', v2='', off='')
measures.baseline(self, rf='ITRF', v0='', v1='', v2='', off='')
measures.asbaseline(self, pos='')
measures.listcodes(self, ms='')
measures.measure(self, v='', rf='', off='')
measures.doframe(self, v='')
measures.framenow(self)
measures.showframe(self)
measures.toradialvelocity(self, rf='', v0='')
measures.tofrequency(self, rf='', v0='', rfq='')
measures.todoppler(self, rf='', v0='', rfq='')
measures.torestfrequency(self, v0='', d0='')
measures.rise(self, crd='', ev='0.0deg')
measures.riseset(self, crd='', ev='0.0deg')
measures.posangle(self, m1='', m2='')
measures.separation(self, m1='', m2='')
measures.addxvalue(self, a='')
measures.type(self)
measures.done(self)
measures.ismeasure(self, v='')
table.table(self)
table.fromfits(self, tablename='', fitsfile='', whichhdu=1, storage='standard', convention='none', nomodify=True, ack=True)
table.fromascii(self, tablename='', asciifile='', headerfile='', autoheader=False, autoshape=[-1], sep='', commentmarker='', firstline=0, lastline=-1, nomodify=True, columnnames=[''], datatypes=[''])
table.open(self, tablename='', lockoptions='', nomodify=True)
table.create(self, tablename='', tabledesc='', lockoptions='default', endianformat='', memtype='', nrow=0, dminfo='')
table.flush(self)
table.fromASDM(self, tablename='', xmlfile='')
table.resync(self)
table.close(self)
table.copy(self, newtablename='', deep=False, valuecopy=False, dminfo='', endian='aipsrc', memorytable=False, returnobject=False, norows=False)
table.copyrows(self, outtable='', startrowin=0, startrowout=-1, nrow=-1)
table.done(self)
table.iswritable(self)
table.isopened(self, tablename='')
table.endianformat(self)
table.lock(self, write=True, nattempts=0)
table.unlock(self)
table.datachanged(self)
table.haslock(self, write=True)
table.lockoptions(self)
table.ismultiused(self, checksubtables=False)
table.browse(self)
table.name(self)
table.createmultitable(self, outputTableName='', tables='', subdirname='')
table.toasciifmt(self, asciifile='', headerfile='', columns=[''], sep='')
table.taql(self, taqlcommand='TaQL expression')
table.query(self, query='String', name='', sortlist='', columns='', style='')
table.calc(self, expr='', prefix='using style base0, endincl, fortranorder', showtaql=False)
table.selectrows(self, rownrs='', name='')
table.info(self)
table.putinfo(self, value='')
table.addreadmeline(self, value='')
table.summary(self, recurse=False)
table.colnames(self)
table.rownumbers(self, tab='', nbytes=0)
table.setmaxcachesize(self, columnname='', nbytes='')
table.isscalarcol(self, columnname='')
table.isvarcol(self, columnname='')
table.coldatatype(self, columnname='')
table.colarraytype(self, columnname='')
table.ncols(self)
table.nrows(self)
table.addrows(self, nrow=1)
table.removerows(self, rownrs='')
table.addcols(self, desc='', dminfo='')
table.renamecol(self, oldname='', newname='')
table.removecols(self, columnames='')
table.iscelldefined(self, columnname='', rownr=0)
table.getcell(self, columnname='', rownr=0)
table.getcellslice(self, columnname='', rownr='', blc='', trc='', incr=[1])
table.getcol(self, columnname='', startrow=0, nrow=-1, rowincr=1)
table.getvarcol(self, columnname='', startrow=0, nrow=-1, rowincr=1)
table.getcolslice(self, columnname='', blc='', trc='', incr='', startrow=0, nrow=-1, rowincr=1)
table.putcell(self, columnname='', rownr='', thevalue='')
table.putcellslice(self, columnname='', rownr='', value='', blc='', trc='', incr=[1])
table.putcol(self, columnname='', value='', startrow=0, nrow=-1, rowincr=1)
table.putvarcol(self, columnname='', value='', startrow=0, nrow=-1, rowincr=1)
table.putcolslice(self, columnname='', value='', blc='', trc='', incr=[1], startrow=0, nrow=-1, rowincr=1)
table.getcolshapestring(self, columnname='', startrow=0, nrow=-1, rowincr=1)
table.getkeyword(self, keyword='')
table.getkeywords(self)
table.getcolkeyword(self, columnname='', keyword='')
table.getcolkeywords(self, columnname='')
table.putkeyword(self, keyword='', value='', makesubrecord=False)
table.putkeywords(self, value='')
table.putcolkeyword(self, columnname='', keyword='', value='')
table.putcolkeywords(self, columnname='', value='')
table.removekeyword(self, keyword='')
table.removecolkeyword(self, columnname='', keyword='')
table.getdminfo(self)
table.keywordnames(self)
table.fieldnames(self, keyword='')
table.colkeywordnames(self, columnname='')
table.colfieldnames(self, columnname='', keyword='')
table.getdesc(self, actual=True)
table.getcoldesc(self, columnname='')
table.ok(self)
table.clearlocks(self)
table.listlocks(self)
table.statistics(self, column='', complex_value='')
table.showcache(self, verbose=True)
table.testincrstman(self, column='')
simulator.simulator(self)
simulator.open(self, ms='')
simulator.openfromms(self, ms='')
simulator.close(self)
simulator.done(self)
simulator.name(self)
simulator.summary(self)
simulator.type(self)
simulator.settimes(self, integrationtime='10s', usehourangle=True, referencetime='50000.0d')
simulator.observe(self, sourcename='', spwname='', starttime='0s', stoptime='3600s', add_observation=False, state_sig=True, state_ref=False, state_cal=0.0, state_load=0.0, state_sub_scan=0, state_obs_mode='OBSERVE_TARGET.ON_SOURCE', observer='CASA simulator', project='CASA simulation')
simulator.observemany(self, sourcenames=[''], spwname='', starttimes=['0s'], stoptimes=['3600s'], directions=[''], add_observation=False, state_sig=True, state_ref=False, state_cal=0.0, state_load=0.0, state_sub_scan=0, state_obs_mode='OBSERVE\_TARGET#ON\_SOURCE', observer='CASA simulator', project='CASA simulation')
simulator.setlimits(self, shadowlimit=1e-6, elevationlimit='10deg')
simulator.setauto(self, autocorrwt=0.0)
simulator.setconfig(self, telescopename='VLA', x=[0], y=[0], z=[0], dishdiameter=[0], offset=[0], mount=['ALT-AZ'], antname=['A'], padname=['P'], coordsystem='global', referencelocation='ALMA')
simulator.setfeed(self, mode='', x=[0], y=[0], pol=['R'])
simulator.setfield(self, sourcename='SOURCE', sourcedirection='', calcode='', distance='0m')
simulator.setmosaicfield(self, sourcename='SOURCE', calcode='', fieldcenter='', xmosp=1, ymosp=1, mosspacing='1arcsec', distance='0m')
simulator.setspwindow(self, spwname='XBAND', freq='8.0e9Hz', deltafreq='50e6Hz', freqresolution='50.e6Hz', refcode='TOPO', nchannels=1, stokes='RR LL')
simulator.setdata(self, spwid=[0], fieldid=[0], msselect='')
simulator.predict(self, imagename=[''], complist='', incremental=False)
simulator.setoptions(self, ftmachine='ft', cache=0, tile=16, gridfunction='SF', location='ALMA', padding=1.3, facets=1, maxdata=2000.0, wprojplanes=1)
simulator.setvp(self, dovp=True, usedefaultvp=True, vptable='', dosquint=True, parangleinc='360deg', skyposthreshold='180deg', pblimit=1.0e-2)
simulator.corrupt(self)
simulator.reset(self)
simulator.setbandpass(self, mode='calculate', table='', interval='3600s', amplitude=[0.0])
simulator.setapply(self, table='', type='B', t=0.0, field='', interp='aipslin', calwt=False, spwmap=[-1], opacity=0.0)
simulator.setgain(self, mode='fbm', table='', interval='10s', amplitude=[0.01])
simulator.settrop(self, mode='screen', table='', pwv=3.0, deltapwv=0.15, beta=1.1, windspeed=7.)
simulator.setpointingerror(self, epjtablename='', applypointingoffsets=False, dopbcorrection=False)
simulator.setleakage(self, mode='constant', table='', amplitude=[0.01], offset=[0.])
simulator.oldsetnoise(self, mode='calculate', table='', simplenoise='0.0Jy', antefficiency=0.8, correfficiency=0.85, spillefficiency=0.85, tau=0.1, trx=50, tatmos=230.0, tcmb=2.7)
simulator.setnoise(self, mode='simplenoise', table='', simplenoise='0.1Jy', pground='560mbar', relhum=20.0, altitude='5000m', waterheight='200m', pwv='1mm', tatmos=250.0, tau=0.1, antefficiency=0.8, spillefficiency=0.85, correfficiency=0.88, trx=50, tground=270.0, tcmb=2.73, OTF=True, senscoeff=0., rxtype=0)
simulator.setpa(self, mode='calculate', table='', interval='10s')
simulator.setseed(self, seed=185349251)
atcafiller.atcafiller(self)
atcafiller.open(self, msname='', filenames=[''], options=[''])
atcafiller.fill(self)
atcafiller.select(self, firstscan=0, lastscan=9999, spw=[-1], lowfreq=0.1, highfreq=999.0, fields=[''], edge=8.0)
atcafiller.opacities(self, fghz=[''], tempk=300.0, humi=50.0, press=1010.0, height=200.0)
imager.imager(self)
imager.advise(self, takeadvice=True, amplitudeloss=0.05, fieldofview='1.0deg')
imager.advisechansel(self, freqstart=1.0e6, freqend=1.1e6, freqstep=100.0, freqframe='LSRK', msname='', fieldid=0, getfreqrange=False, spwselection='')
imager.approximatepsf(self, psf='')
imager.boxmask(self, mask='', blc=[0, 0, 0, 0], trc=[], value=1.0)
imager.calcuvw(self, fields=[-1], refcode='', reuse=True)
imager.clean(self, algorithm='clark', niter=1000, gain=0.1, threshold='0.0Jy', displayprogress=False, model=[''], keepfixed=[False], complist='', mask=[''], image=[''], residual=[''], psfimage=[''], interactive=False, npercycle=100, masktemplate='')
imager.clipimage(self, image='', threshold='0.0Jy')
imager.clipvis(self, threshold='0.0Jy')
imager.close(self)
imager.defineimage(self, nx=128, ny=-1, cellx='1.0', celly='', stokes='IV', phasecenter='0', mode='frequency', nchan=-1, start='0', step='1', spw=[0], restfreq='', outframe='LSRK', veltype='optical', facets=1, movingsource='', distance='0.0', projection='SIN')
imager.done(self)
imager.drawmask(self, image='', mask='', niter=0, npercycle=0, threshold='0 mJy')
imager.exprmask(self, mask='', expr=1.0)
imager.feather(self, image='', highres='', lowres='', lowpsf='', effdishdiam=-1.0, lowpassfiltersd=False)
imager.filter(self, type='gaussian', bmaj='1arcsec', bmin='1arcsec', bpa='0deg')
imager.fitpsf(self, psf='')
imager.fixvis(self, fields=[-1], phasedirs=[''], refcode='', distances=[0.0], datacolumn='all')
imager.ft(self, model=[''], complist='', incremental=False, phasecentertime=-1.0)
imager.getweightgrid(self, type='imaging', wgtimages=[''])
imager.linearmosaic(self, images=[''], mosaic='', fluxscale='', sensitivity='', fieldids=[0], usedefaultvp=True, vptable='')
imager.make(self, image='')
imager.predictcomp(self, objname='', standard='', epoch='55555.0d', freqs=[1.0e11], pfx='predictcomp')
imager.makeimage(self, type='observed', image='', compleximage='', verbose=True)
imager.makemodelfromsd(self, sdimage='', modelimage='', sdpsf='', maskimage='')
imager.mask(self, image='', mask='', threshold='0.0Jy')
imager.mem(self, algorithm='entropy', niter=20, sigma='0.001Jy', targetflux='1.0Jy', constrainflux=False, displayprogress=False, model=[''], keepfixed=[False], complist='', prior=[''], mask=[''], image=[''], residual=[''])
imager.nnls(self, model=[''], keepfixed=[False], complist='', niter=0, tolerance=1e-06, fluxmask=[''], datamask=[''], image=[''], residual=[''])
imager.open(self, thems='', compress=False, usescratch=False)
imager.pb(self, inimage='', outimage='', incomps='', outcomps='', operation='correct', pointingcenter='', parangle='0.0deg', pborvp='vb')
imager.plotsummary(self)
imager.plotuv(self, rotate=False)
imager.plotvis(self, type='all', increment=1)
imager.plotweights(self, gridded=False, increment=1)
imager.regionmask(self, mask='', region='', boxes='', circles='', value=1.0)
imager.regiontoimagemask(self, mask='', region='', boxes='', circles='', value=1.0)
imager.residual(self, model=[''], complist='', image=[''])
imager.restore(self, model=[''], complist='', image=[''], residual=[''])
imager.updateresidual(self, model=[''], complist='', image=[''], residual=[''])
imager.sensitivity(self)
imager.apparentsens(self)
imager.setbeam(self, bmaj='1.0arcsec', bmin='1.0arcsec', bpa='0deg')
imager.selectvis(self, vis='', nchan=[-1], start=[0], step=[1], spw='-1', field='-1', baseline='-1', time='', scan='', intent='', observation='', uvrange='', taql='', usescratch=False, datainmemory=False, writeaccess=True)
imager.setjy(self, field='', spw='', modimage='', fluxdensity=[0.0, 0.0, 0.0, 0.0], standard='Baars', scalebychan=False, spix=[0.0], reffreq='1GHz', polindex=[0.0], polangle=[0.0], rotmeas=0.0, time='', scan='', intent='', observation='', interpolation='nearest')
imager.ssoflux(self)
imager.setmfcontrol(self, cyclefactor=1.5, cyclespeedup=-1, cyclemaxpsffraction=0.8, stoplargenegatives=2, stoppointmode=-1, minpb=0.1, scaletype='SAULT', constpb=0.4, fluxscale=[''], flatnoise=True)
imager.setoptions(self, ftmachine='ft', cache=-1, tile=16, gridfunction='SF', location='', padding=1.0, freqinterp='nearest', wprojplanes=-1, epjtablename='', applypointingoffsets=False, dopbgriddingcorrections=True, cfcachedirname='', rotpastep=5.0, pastep=360.0, pblimit=0.05, imagetilevol=0, singleprecisiononly=False, numthreads=-1, psterm=True, aterm=True, mterm=True, wbawp=False, conjbeams=True)
imager.setscales(self, scalemethod='nscales', nscales=5, uservector=[0.0, 3.0, 10.0])
imager.setsmallscalebias(self, inbias=0.6)
imager.settaylorterms(self, ntaylorterms=2, reffreq=0.0)
imager.setsdoptions(self, scale=1.0, weight=1.0, convsupport=-1, pointingcolumntouse='DIRECTION', truncate='-1pixel', gwidth='-1pixel', jwidth='-1pixel', minweight=0., clipminmax=False)
imager.setvp(self, dovp=False, usedefaultvp=True, vptable='', dosquint=False, parangleinc='360deg', skyposthreshold='180deg', telescope='', verbose=True)
imager.setweightgrid(self, weight='', type='imaging')
imager.smooth(self, model=[''], image=[''], usefit=True, bmaj='5.arcsec', bmin='5.arcsec', bpa='0deg', normalize=True)
imager.stop(self)
imager.summary(self)
imager.uvrange(self, uvmin=0.0, uvmax=0.0)
imager.weight(self, type='natural', rmode='norm', noise='0.0Jy', robust=0.0, fieldofview='0.0arcsec', npixels=0, mosaic=False)
imager.mapextent(self, ref='J2000', movingsource='', pointingcolumntouse='DIRECTION')
imager.pointingsampling(self, pattern='raster', ref='J2000', movingsource='', pointingcolumntouse='DIRECTION', antenna='')
linearmosaic.linearmosaic(self)
linearmosaic.defineoutputimage(self, nx=128, ny=-1, cellx='1.0', celly='', imagecenter='0', outputimage='', outputweight='')
linearmosaic.setoutputimage(self, outputimage='', outputweight='', imageweighttype=1, weighttype=1)
linearmosaic.saultweightimage(self, outputimage='', fracpeak=0.1)
linearmosaic.setlinmostype(self, linmostype='optimal')
linearmosaic.makemosaic(self, images='', weightimages='', imageweighttype=1, weighttype=1)
utils.utils(self)
utils.verify(self, input='', xmldescriptor='', throwexecpt=False)
utils.setconstraints(self, xmldescriptor='')
utils.verifyparam(self, param='')
utils.expandparam(self, name='', value='')
utils.torecord(self, input='')
utils.toxml(self, input='', asfile=False, filename='recordas.xml')
utils.getrc(self, rcvar='')
utils.removetable(self, tablenames=[''])
utils.tableinfo(self, tablename='')
utils.lockedtables(self)
utils.hostinfo(self)
utils.c_exception(self)
utils.c_exception_clear(self)
utils.initialize(self, default_path='')
utils.defaultpath(self)
utils.setpath(self, dirs=[''])
utils.getpath(self)
utils.clearpath(self)
utils.resolve(self, path='')
utils.registry(self)
utils.services(self)
utils.shutdown(self)
utils.version(self)
utils.version_variant(self)
utils.version_desc(self)
utils.version_info(self)
utils.version_string(self)
utils.compare_version(self, comparitor='', vec='')
utils.toolversion(self)
utils.toolversion_string(self)
calibrater.calibrater(self)
calibrater.open(self, filename='', compress=False, addcorr=True, addmodel=True)
calibrater.selectvis(self, time='', spw='', scan='', field='', intent='', observation='', baseline='', uvrange='', chanmode='channel', nchan=1, start=0, step=1, mstart=0.0, mstep=0.0, msselect='')
calibrater.setmodel(self, modelimage='')
calibrater.setptmodel(self, stokes=[0.0, 0.0, 0.0, 0.0])
calibrater.setapply(self, type='B', t=0.0, table='', field='', interp='aipslin', select='', calwt=False, spwmap=[-1], opacity=[0.0])
calibrater.setcallib(self, callib='')
calibrater.validatecallib(self, callib='')
calibrater.setsolve(self, type='G', t='', table='', append=False, preavg=-1.0, phaseonly=False, apmode='AP', refant='', refantmode='flex', minblperant=4, solnorm=False, normtype='median', minsnr=0.0, combine='', fillgaps=0, cfcache='', painc=360.0, fitorder=0, fraction=0.1, numedge=-1, radius='', smooth=True, zerorates=False, globalsolve=True, niter=100, delaywindow=[''], ratewindow=[''], paramactive=[''], solmode='', rmsthresh=[''])
calibrater.setsolvegainspline(self, table='', append=False, mode='AMP', splinetime=10800, preavg=0.0, npointaver=10, phasewrap=250, refant='')
calibrater.setsolvebandpoly(self, table='', append=False, t='', combine='', degamp=3, degphase=3, visnorm=False, solnorm=True, maskcenter=0, maskedge=5.0, refant='')
calibrater.state(self)
calibrater.reset(self, apply=True, solve=True)
calibrater.initcalset(self, calset=0)
calibrater.delmod(self, otf=False, field='', spw='', scr=False)
calibrater.solve(self)
calibrater.correct(self, applymode='')
calibrater.corrupt(self)
calibrater.initweights(self, wtmode='nyq', dowtsp=False, tsystable='', gainfield='', interp='', spwmap=[''])
calibrater.fluxscale(self, tablein='', reference='', tableout='', transfer='', listfile='', append=False, refspwmap=[-1], gainthreshold=-1.0, antenna='', timerange='', scan='', incremental=False, fitorder=1, display=False)
calibrater.accumulate(self, tablein='', incrtable='', tableout='', field='', calfield='', interp='linear', t=-1.0, spwmap=[-1])
calibrater.activityrec(self)
calibrater.specifycal(self, caltable='', time='', spw='', antenna='', pol='', caltype='', parameter=[1.0], infile='', uniform=True)
calibrater.smooth(self, tablein='', tableout='', field='', smoothtype='mean', smoothtime=60.0)
calibrater.rerefant(self, tablein='', tableout='', refantmode='strict', refant='')
calibrater.listcal(self, caltable='', field='', antenna='', spw='', listfile='', pagerows=50)
calibrater.posangcal(self, posangcor='', tablein='', tableout='')
calibrater.linpolcor(self, tablein='', tableout='', fields=[''])
calibrater.plotcal(self, antennas='', fields='', spwids='', plottype='1/AMP', tablename='', polarization=1, multiplot=False, nx=1, ny=1, psfile='')
calibrater.modelfit(self, vary='', niter=0, compshape='P', par=[1.0, 0.0, 0.0], file='')
calibrater.createcaltable(self, caltable='', partype='', caltype='', singlechan='')
calibrater.updatecaltable(self, caltable='')
calibrater.close(self)
calibrater.done(self)
calibrater.parsecallibfile(self, filein='')
calibrater.setcorrdepflags(self, corrdepflags='')
calibrater.setvi(self, old=False, quiet=False)
componentlist.componentlist(self)
componentlist.open(self, filename='', nomodify=False, log=True)
componentlist.asciitocomponentlist(self, filename='', asciifile='', refer='B1950', format='ST', direction='', spectrum='', flux='', log=True)
componentlist.concatenate(self, list='', which=[-1], log=True)
componentlist.fromrecord(self, record='')
componentlist.torecord(self)
componentlist.remove(self, which=[-1], log=True)
componentlist.purge(self)
componentlist.recover(self, log=True)
componentlist.length(self)
componentlist.indices(self)
componentlist.sort(self, criteria='Polarization', log=True)
componentlist.isphysical(self, which=[-1])
componentlist.sample(self, direction='J2000 00h00m00.00 90d00m00.0', pixellatsize='0.0deg', pixellongsize='0.0deg', frequency='1.4GHz')
componentlist.rename(self, filename='', log=True)
componentlist.simulate(self, howmany=1, log=True)
componentlist.addcomponent(self, flux='', fluxunit='Jy', polarization='Circular', dir='J2000 00h00m00.0 90d00m00.0', shape='disk', majoraxis='2.0arcmin', minoraxis='1.0arcmin', positionangle='0.0deg', freq='LSRK 1.415GHz', spectrumtype='spectral index', index=1.0, optionalparms=[0.0], label='')
componentlist.close(self, log=True)
componentlist.edit(self, which='', log=True)
componentlist.done(self)
componentlist.select(self, which='')
componentlist.deselect(self, which='')
componentlist.selected(self)
componentlist.getlabel(self, which='')
componentlist.setlabel(self, which='', value='', log=True)
componentlist.getfluxvalue(self, which='')
componentlist.getfluxunit(self, which='')
componentlist.getfluxpol(self, which='')
componentlist.getfluxerror(self, which='')
componentlist.setflux(self, which='', value='', unit='Jy', polarization='circular', error='', log=True)
componentlist.convertfluxunit(self, which='', unit='Jy')
componentlist.convertfluxpol(self, which='', polarization='circular')
componentlist.getrefdir(self, which='')
componentlist.getrefdirra(self, which='', unit='deg', precision=6)
componentlist.getrefdirdec(self, which='', unit='deg', precision=6)
componentlist.getrefdirframe(self, which='')
componentlist.setrefdir(self, which=1, ra='', dec='', log=True)
componentlist.setrefdirframe(self, which='', frame='', log=True)
componentlist.convertrefdir(self, which='', frame='')
componentlist.shapetype(self, which='')
componentlist.getshape(self, which='')
componentlist.setshape(self, which='', type='disk', majoraxis='1.0arcmin', minoraxis='1.0arcmin', positionangle='0.0deg', majoraxiserror='0.0arcmin', minoraxiserror='0.0arcmin', positionangleerror='0.0deg', optionalparms=[0.0], log=True)
componentlist.convertshape(self, which='', majoraxis='rad', minoraxis='rad', positionangle='rad')
componentlist.spectrumtype(self, which='')
componentlist.getspectrum(self, which='')
componentlist.setstokesspectrum(self, which='', type='spectral index', index=[0.0], tabularfreqs=[1.0e11], tabulari=[1.0], tabularq=[0.0], tabularu=[0.0], tabularv=[0.0], reffreq='1.4GHz', frame='LSRK')
componentlist.setspectrum(self, which='', type='spectral index', index=0.0, tabularfreqs=[1.0e11], tabularflux=[1.0], tabularframe='LSRK')
componentlist.getfreq(self, which='')
componentlist.getfreqvalue(self, which='')
componentlist.getfrequnit(self, which='')
componentlist.getfreqframe(self, which='')
componentlist.setfreq(self, which='', value='', unit='GHz', log=True)
componentlist.setfreqframe(self, which='', frame='TOPO', log=True)
componentlist.convertfrequnit(self, which='', unit='GHz')
componentlist.getcomponent(self, which='', iknow=False)
componentlist.add(self, thecomponent='', iknow=True)
componentlist.replace(self, which='', list='', whichones=[-1])
componentlist.summarize(self, which=-1)
componentlist.iscomponentlist(self, tool='')
sakura.sakura(self)
sakura.initialize_sakura(self, level='WARN')
sakura.cleanup_sakura(self)
coordsys.coordsys(self)
coordsys.newcoordsys(self, direction=False, spectral=False, stokes=[''], linear=0, tabular=False)
coordsys.addcoordinate(self, direction=False, spectral=False, stokes=[''], linear=0, tabular=False)
coordsys.axesmap(self, toworld=True)
coordsys.axiscoordinatetypes(self, world=True)
coordsys.conversiontype(self, type='direction')
coordsys.convert(self, coordin='', absin=[True], dopplerin='radio', unitsin=['Native'], absout=[True], dopplerout='radio', unitsout=['Native'], shape=[-1])
coordsys.convertdirection(self, frame='')
coordsys.convertmany(self, coordin='', absin=[True], dopplerin='radio', unitsin=['Native'], absout=[True], dopplerout='radio', unitsout=['Native'], shape=[-1])
coordsys.coordinatetype(self, which=-1)
coordsys.copy(self)
coordsys.done(self)
coordsys.epoch(self)
coordsys.findaxis(self, world=True, axis=0)
coordsys.findaxisbyname(self, axisname='', allowfriendlyname=True)
coordsys.findcoordinate(self, type='direction', which=0)
coordsys.frequencytofrequency(self, value='', frequnit='', velocity='')
coordsys.frequencytovelocity(self, value='', frequnit='', doppler='radio', velunit='km/s')
coordsys.fromrecord(self, record='')
coordsys.increment(self, format='n', type='')
coordsys.lineartransform(self, type='')
coordsys.names(self, type='')
coordsys.naxes(self, world=True)
coordsys.ncoordinates(self)
coordsys.observer(self)
coordsys.projection(self, type='')
coordsys.referencecode(self, type='', list=False)
coordsys.referencepixel(self, type='')
coordsys.referencevalue(self, format='n', type='')
coordsys.reorder(self, order='')
coordsys.transpose(self, order='')
coordsys.replace(self, csys='', whichin='', whichout='')
coordsys.restfrequency(self)
coordsys.setconversiontype(self, direction='', spectral='')
coordsys.getconversiontype(self, type='', showconversion=True)
coordsys.setdirection(self, refcode='', proj='', projpar=[-1], refpix=[-1], refval='', incr='', xform='', poles='')
coordsys.setepoch(self, value='')
coordsys.setincrement(self, value='', type='')
coordsys.setlineartransform(self, type='', value='')
coordsys.setnames(self, value='', type='')
coordsys.setobserver(self, value='')
coordsys.setprojection(self, type='', parameters=[-1])
coordsys.setreferencecode(self, value='', type='direction', adjust=True)
coordsys.setreferencelocation(self, pixel=[-1], world='-1', mask=[False])
coordsys.setreferencepixel(self, value='', type='')
coordsys.setreferencevalue(self, value='', type='')
coordsys.setrestfrequency(self, value='', which=0, append=False)
coordsys.setspectral(self, refcode='', restfreq='', frequencies='1GHz', doppler='', velocities='1km/s')
coordsys.setstokes(self, stokes='')
coordsys.settabular(self, pixel=[-1], world=[-1], which=0)
coordsys.settelescope(self, value='')
coordsys.setunits(self, value='', type='', overwrite=False, which=-10)
coordsys.stokes(self)
coordsys.summary(self, doppler='RADIO', list=True)
coordsys.telescope(self)
coordsys.toabs(self, value='', isworld=-1)
coordsys.toabsmany(self, value='', isworld=-1)
coordsys.topixel(self, value='')
coordsys.topixelmany(self, value='')
coordsys.torecord(self)
coordsys.subimage(self, originshft='', newshape=[''])
coordsys.torel(self, value='', isworld=-1)
coordsys.torelmany(self, value='', isworld=-1)
coordsys.toworld(self, value='', format='n')
coordsys.toworldmany(self, value='')
coordsys.type(self)
coordsys.units(self, type='')
coordsys.velocitytofrequency(self, value='', frequnit='', doppler='radio', velunit='km/s')
coordsys.parentname(self)
coordsys.setparentname(self, imagename='')
calanalysis.calanalysis(self)
calanalysis.open(self, caltable='')
calanalysis.close(self)
calanalysis.calname(self)
calanalysis.msname(self)
calanalysis.viscal(self)
calanalysis.partype(self)
calanalysis.polbasis(self)
calanalysis.numfield(self)
calanalysis.field(self, name=True)
calanalysis.numantenna(self)
calanalysis.numantenna1(self)
calanalysis.numantenna2(self)
calanalysis.antenna(self, name=True)
calanalysis.antenna1(self, name=True)
calanalysis.antenna2(self, name=True)
calanalysis.numfeed(self)
calanalysis.feed(self)
calanalysis.numtime(self)
calanalysis.time(self)
calanalysis.numspw(self)
calanalysis.spw(self, name=True)
calanalysis.numchannel(self)
calanalysis.freq(self)
calanalysis.get(self, field='', antenna='', timerange='', spw='', feed='', axis='TIME', ap='AMPLITUDE', norm=False, unwrap=False, jumpmax=0.0)
calanalysis.fit(self, field='', antenna='', timerange='', spw='', feed='', axis='TIME', ap='AMPLITUDE', norm=False, unwrap=False, jumpmax=0.0, order='AVERAGE', type='LSQ', weight=False)
functional.functional(self)
functional.f(self, x=0)
functional.ndim(self)
functional.done(self)
functional.gaussian1d(self, amplitude=1, center=0, fwhm=1)
functional.gaussian2d(self, amplitude=1, center=[-1], fwhm=[-1], pa='0')
functional.polynomial(self, coefficients=[0])
functional.powerlogpoly(self, coefficients=[0])
synthesisutils.synthesisutils(self)
synthesisutils.contdatapartition(self, selpars='', npart=1)
synthesisutils.advisechansel(self, freqstart='1.0e6', freqend='1.1e6', freqstep='100.0', freqframe='LSRK', ephemtable='', msname='', fieldid=0, getfreqrange=False, spwselection='')
synthesisutils.cubedatapartition(self, selpars='', npart=1, fstart='1GHz', fend='1.5GHz', frame='LSRK')
synthesisutils.cubeimagepartition(self, impars='', npart=1)
synthesisutils.cubedataimagepartition(self, selpars='', incsys='', npart=1, nchannel=1)
synthesisutils.checkselectionparams(self, selpars='')
synthesisutils.checkimageparams(self, impars='')
synthesisutils.checkgridparams(self, gridpars='')
synthesisutils.updateimpars(self, impars='')
synthesisutils.getOptimumSize(self, size=100)
synthesisutils.fitPsfBeam(self, imagename='', nterms=1, psfcutoff=0.35)
synthesisutils.done(self)
agentflagger.agentflagger(self)
agentflagger.done(self)
agentflagger.open(self, msname='', ntime=0.0)
agentflagger.selectdata(self, config='', field='', spw='', array='', feed='', scan='', antenna='', uvrange='', timerange='', correlation='', intent='', observation='')
agentflagger.parseagentparameters(self, aparams='')
agentflagger.init(self)
agentflagger.run(self, writeflags=True, sequential=True)
agentflagger.getflagversionlist(self, printflags=True)
agentflagger.printflagselection(self)
agentflagger.saveflagversion(self, versionname='', comment='', merge='')
agentflagger.restoreflagversion(self, versionname=[''], merge='')
agentflagger.deleteflagversion(self, versionname=[''])
agentflagger.parsemanualparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', autocorr=False, apply=True)
agentflagger.parseclipparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', datacolumn='DATA', clipminmax=[''], clipoutside=True, channelavg=False, chanbin=1, timeavg=False, timebin='', clipzeros=False, apply=True)
agentflagger.parsequackparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', quackmode='beg', quackinterval=0.0, quackincrement=False, apply=True)
agentflagger.parseelevationparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', lowerlimit=0.0, upperlimit=90.0, apply=True)
agentflagger.parsetfcropparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', ntime=0.0, combinescans=False, datacolumn='DATA', timecutoff=4.0, freqcutoff=3.0, timefit='line', freqfit='poly', maxnpieces=7, flagdimension='freqtime', usewindowstats='none', halfwin=1, extendflags=True, apply=True, channelavg=False, chanbin=1, timeavg=False, timebin='')
agentflagger.parseantintparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', antint_ref_antenna='', minchanfrac=0.6, verbose=False, apply=True)
agentflagger.parseextendparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', ntime=0.0, combinescans=False, extendpols=True, growtime=50.0, growfreq=50.0, growaround=False, flagneartime=False, flagnearfreq=False, apply=True)
agentflagger.parsesummaryparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', spwchan=False, spwcorr=False, basecnt=False, fieldcnt=False, name='')
quanta.quanta(self)
quanta.convertfreq(self, v='1.0', outunit='Hz')
quanta.convertdop(self, v='0.0', outunit='km/s')
quanta.quantity(self, v='', unitname='')
quanta.getvalue(self, v='')
quanta.getunit(self, v='')
quanta.canonical(self, v='1.0')
quanta.canon(self, v='')
quanta.convert(self, v='', outunit='')
quanta.define(self, name='', v='1')
quanta.map(self, v='all')
quanta.maprec(self, v='all')
quanta.fits(self)
quanta.angle(self, v='', prec=0, form=[''], showform=False)
quanta.time(self, v='', prec=0, form=[''], showform=False)
quanta.add(self, v='', a='0')
quanta.sub(self, v='', a='0')
quanta.mul(self, v='', a='1')
quanta.div(self, v='', a='1')
quanta.neg(self, v='1')
quanta.norm(self, v='', a=-0.5)
quanta.le(self, v='', a='0')
quanta.lt(self, v='', a='0')
quanta.eq(self, v='', a='0')
quanta.ne(self, v='', a='0')
quanta.gt(self, v='', a='0')
quanta.ge(self, v='', a='0')
quanta.sin(self, v='')
quanta.cos(self, v='')
quanta.tan(self, v='')
quanta.asin(self, v='')
quanta.acos(self, v='')
quanta.atan(self, v='')
quanta.atan2(self, v='', a='')
quanta.abs(self, v='')
quanta.ceil(self, v='')
quanta.floor(self, v='')
quanta.log(self, v='')
quanta.log10(self, v='')
quanta.exp(self, v='')
quanta.sqrt(self, v='')
quanta.compare(self, v='', a='')
quanta.check(self, v='')
quanta.checkfreq(self, cm='')
quanta.pow(self, v='', a=1)
quanta.constants(self, v='pi')
quanta.isangle(self, v='')
quanta.totime(self, v='')
quanta.toangle(self, v='')
quanta.splitdate(self, v='')
quanta.tos(self, v='', prec=9)
quanta.type(self)
quanta.done(self, kill=False)
quanta.unit(self, v='', unitname='')
quanta.isquantity(self, v='')
quanta.setformat(self, t='', v='F')
quanta.getformat(self, t='')
quanta.formxxx(self, v='', format='dms', prec=2)
image.image(self)
image.newimage(self, infile='')
image.newimagefromfile(self, infile='')
image.imagecalc(self, outfile='', pixels='', overwrite=False, imagemd='', prec='float')
image.collapse(self, function='', axes='0', outfile='', region='', box='', chans='', stokes='', mask='', overwrite=False, stretch=False)
image.decimate(self, outfile='', axis=0, factor=1, method='copy', region='', mask='', overwrite=False, stretch=False)
image.dohistory(self, enable=True)
image.imageconcat(self, outfile='', infiles='', axis=-1, relax=False, tempclose=True, overwrite=False, reorder=False, mode='paged')
image.fromarray(self, outfile='', pixels='', csys='', linear=False, overwrite=False, log=True, type='f')
image.fromcomplist(self, outfile='', shape=[''], cl='', csys='', overwrite=False, log=True, cache=True)
image.fromfits(self, outfile='', infile='', whichrep=0, whichhdu=0, zeroblanks=False, overwrite=False)
image.fromimage(self, outfile='', infile='', region='', mask='', dropdeg=False, overwrite=False)
image.fromshape(self, outfile='', shape=[0], csys='', linear=False, overwrite=False, log=True, type='f')
image.maketestimage(self, outfile='', overwrite=False)
image.deviation(self, outfile='', region='', mask='', overwrite=False, stretch=False, grid=[1, 1], anchor='ref', xlength='1pix', ylength='1pix', interp='cubic', stattype='sigma', statalg='classic', zscore=-1, maxiter=-1)
image.adddegaxes(self, outfile='', direction=False, spectral=False, stokes='', linear=False, tabular=False, overwrite=False, silent=False)
image.addnoise(self, type='normal', pars=[0.0, 1.0], region='', zero=False, seeds=[''])
image.convolve(self, outfile='', kernel='', scale=-1.0, region='', mask='', overwrite=False, stretch=False)
image.boundingbox(self, region='')
image.boxcar(self, outfile='', region='', mask='', axis=-1, width=2, drop=True, dmethod='copy', overwrite=False, stretch=False)
image.brightnessunit(self)
image.calc(self, pixels='', verbose=True)
image.calcmask(self, mask='', name='', asdefault=True)
image.close(self)
image.continuumsub(self, outline='', outcont='continuumsub.im', region='', channels=[-1], pol='', fitorder=0, overwrite=False)
image.convertflux(self, value='0Jy/beam', major='1arcsec', minor='1arcsec', type='Gaussian', topeak=True, channel=-1, polarization=-1)
image.convolve2d(self, outfile='', axes=[0, 1], type='gaussian', major='0deg', minor='0deg', pa='0deg', scale=-1, region='', mask='', overwrite=False, stretch=False, targetres=False, beam='')
image.coordsys(self, axes=[-1])
image.coordmeasures(self, pixel=[-1], dframe='cl', sframe='cl')
image.decompose(self, region='', mask='', simple=False, threshold=-1, ncontour=11, minrange=1, naxis=2, fit=True, maxrms=-1, maxretry=-1, maxiter=256, convcriteria=0.0001, stretch=False)
image.deconvolvecomponentlist(self, complist='', channel=-1, polarization=-1)
image.deconvolvefrombeam(self, source='', beam='')
image.beamforconvolvedsize(self, source='', convolved='')
image.commonbeam(self)
image.remove(self, done=False, verbose=True)
image.removefile(self, file='')
image.done(self, remove=False, verbose=True)
image.fft(self, real='', imag='', amp='', phase='', axes=[-1], region='', mask='', stretch=False, complex='')
image.findsources(self, nmax=20, cutoff=0.1, region='', mask='', point=True, width=5, negfind=False)
image.fitprofile(self, box='', region='', chans='', stokes='', axis=-1, mask='', ngauss=1, poly=-1, estimates='', minpts=1, multifit=False, model='', residual='', amp='', amperr='', center='', centererr='', fwhm='', fwhmerr='', integral='', integralerr='', stretch=False, logresults=True, pampest='', pcenterest='', pfwhmest='', pfix='', gmncomps=0, gmampcon='', gmcentercon='', gmfwhmcon='', gmampest=[0.0], gmcenterest=[0.0], gmfwhmest=[0.0], gmfix='', spxtype='', spxest=[''], spxfix=[''], div='0', spxsol='', spxerr='', logfile='', append=True, pfunc='', goodamprange=[0.0], goodcenterrange=[0.0], goodfwhmrange=[0.0], sigma='', outsigma='', planes=[''])
image.fitcomponents(self, box='', region='', chans='', stokes='', mask='', includepix=[-1], excludepix=[-1], residual='', model='', estimates='', logfile='', append=True, newestimates='', complist='', overwrite=False, dooff=False, offset=0.0, fixoffset=False, stretch=False, rms='', noisefwhm='', summary='')
image.fromrecord(self, record='', outfile='')
image.getchunk(self, blc=[-1], trc=[-1], inc=[1], axes=[-1], list=False, dropdeg=False, getmask=False)
image.getregion(self, region='', axes=[-1], mask='', list=False, dropdeg=False, getmask=False, stretch=False)
image.getprofile(self, axis=-1, function='mean', region='', mask='', unit='', stretch=False, spectype='default', restfreq='', frame='', logfile='')
image.getslice(self, x='', y='', axes=[0, 1], coord=[-1], npts=0, method='linear')
image.hanning(self, outfile='', region='', mask='', axis=-10, drop=True, overwrite=False, stretch=False, dmethod='copy')
image.haslock(self)
image.histograms(self, axes=[-1], region='', mask='', nbins=25, includepix=[-1], cumu=False, log=False, stretch=False)
image.history(self, list=True)
image.insert(self, infile='', region='', locate=[-1], verbose=False)
image.isopen(self)
image.ispersistent(self)
image.lock(self, writelock=False, nattempts=0)
image.makecomplex(self, outfile='', imag='', region='', overwrite=False)
image.maskhandler(self, op='default', name=[''])
image.miscinfo(self)
image.modify(self, model='', region='', mask='', subtract=True, list=True, stretch=False)
image.maxfit(self, region='', point=True, width=5, negfind=False, list=True)
image.moments(self, moments=[0], axis=-10, region='', mask='', method=[''], smoothaxes=[-1], smoothtypes='', smoothwidths=[0.0], includepix=[-1], excludepix=[-1], peaksnr=3.0, stddev=0.0, doppler='RADIO', outfile='', smoothout='', overwrite=False, drop=True, stretch=False)
image.name(self, strippath=False)
image.open(self, cache=True)
image.pad(self, outfile='', npixels=1, value=0, padmask=False, overwrite=False, region='', box='', chans='', stokes='', mask='', stretch=False, wantreturn=True)
image.crop(self, outfile='', axes=[''], overwrite=False, region='', box='', chans='', stokes='', mask='', stretch=False, wantreturn=True)
image.pixelvalue(self, pixel=[-1])
image.putchunk(self, pixels='', blc=[-1], inc=[1], list=False, locking=True, replicate=False)
image.putregion(self, pixels='', pixelmask='', region='', list=False, usemask=True, locking=True, replicate=False)
image.rebin(self, outfile='', bin='', region='', mask='', dropdeg=False, overwrite=False, stretch=False, crop=False)
image.regrid(self, outfile='', shape=[-1], csys='', axes=[-1], region='', mask='', method='linear', decimate=10, replicate=False, doref=True, dropdeg=False, overwrite=False, force=False, asvelocity=False, stretch=False)
image.transpose(self, outfile='', order='')
image.rotate(self, outfile='', shape=[-1], pa='0deg', region='', mask='', method='cubic', decimate=0, replicate=False, dropdeg=False, overwrite=False, stretch=False)
image.rotatebeam(self, angle='0deg')
image.rename(self, name='', overwrite=False)
image.replacemaskedpixels(self, pixels='', region='', mask='', update=False, list=False, stretch=False)
image.beamarea(self, channel=-1, polarization=-1)
image.restoringbeam(self, channel=-1, polarization=-1)
image.sepconvolve(self, outfile='', axes=[-1], types=[''], widths='', scale=-1, region='', mask='', overwrite=False, stretch=False)
image.set(self, pixels='', pixelmask=-1, region='', list=False)
image.setbrightnessunit(self, unit='')
image.setcoordsys(self, csys='')
image.sethistory(self, origin='', history=[''])
image.setmiscinfo(self, info='')
image.shape(self)
image.setrestoringbeam(self, major='1arcsec', minor='1arcsec', pa='0deg', beam='', remove=False, log=True, channel=-1, polarization=-1, imagename='')
image.statistics(self, axes=[-1], region='', mask='', includepix=[-1], excludepix=[-1], list=False, force=False, disk=False, robust=False, verbose=False, stretch=False, logfile='', append=True, algorithm='classic', fence=-1, center='mean', lside=True, zscore=-1, maxiter=-1, clmethod='auto', niter=3)
image.twopointcorrelation(self, outfile='', region='', mask='', axes=[-1], method='structurefunction', overwrite=False, stretch=False)
image.subimage(self, outfile='', region='', mask='', dropdeg=False, overwrite=False, list=True, stretch=False, wantreturn=True, keepaxes=[''])
image.summary(self, doppler='RADIO', list=True, pixelorder=True, verbose=False)
image.tofits(self, outfile='', velocity=False, optical=True, bitpix=-32, minpix=1, maxpix=-1, region='', mask='', overwrite=False, dropdeg=False, deglast=False, dropstokes=False, stokeslast=True, wavelength=False, airwavelength=False, stretch=False, history=True)
image.torecord(self)
image.type(self)
image.topixel(self, value='')
image.toworld(self, value='', format='n', dovelocity=True)
image.unlock(self)
image.newimagefromarray(self, outfile='', pixels='', csys='', linear=False, overwrite=False, log=True, type='f')
image.newimagefromfits(self, outfile='', infile='', whichrep=0, whichhdu=0, zeroblanks=False, overwrite=False)
image.newimagefromimage(self, infile='', outfile='', region='', mask='', dropdeg=False, overwrite=False)
image.newimagefromshape(self, outfile='', shape=[0], csys='', linear=False, overwrite=False, log=True, type='f')
image.pbcor(self, pbimage='', outfile='', overwrite=False, box='', region='', chans='', stokes='', mask='', mode='divide', cutoff=-1.0, stretch=False)
image.pixeltype(self)
image.pv(self, outfile='', start='', end='', center='', length='', pa='', width='1', unit='arcsec', overwrite=False, region='', chans='', stokes='', mask='', stretch=False, wantreturn=True)
image.makearray(self, v=0.0, shape=[0])
image.isconform(self, other='')
ms.ms(self)
ms.open(self, thems='', nomodify=True, lock=False, check=False)
ms.reset(self)
ms.close(self)
ms.done(self)
ms.name(self)
ms.iswritable(self)
ms.nrow(self, selected=False)
ms.getdata(self, items=[''], ifraxis=False, ifraxisgap=0, increment=1, average=False)
ms.putdata(self, items='')
ms.fromfits(self, msfile='', fitsfile='', nomodify=True, lock=False, obstype=0, host='', forcenewserver=False, antnamescheme='old')
ms.fromfitsidi(self, msfile='', fitsfile='', nomodify=True, lock=False, obstype=0)
ms.tofits(self, fitsfile='', column='corrected', field='', spw='', baseline='', time='', scan='', uvrange='', taql='', writesyscal=False, multisource=False, combinespw=False, writestation=False, padwithflags=False, overwrite=False)
ms.listfits(self, fitsfile='')
ms.asdmref(self, abspath='')
ms.concatenate(self, msfile='', freqtol='1Hz', dirtol='1mas', weightscale=1., handling=0, destmsfile='', respectname=False)
ms.testconcatenate(self, msfile='', freqtol='1Hz', dirtol='1mas', respectname=False)
ms.virtconcatenate(self, msfile='', auxfilename='', freqtol='1Hz', dirtol='1mas', weightscale=1., respectname=True)
ms.createmultims(self, outputTableName='', tables='', subtables='', nomodify=True, lock=False, copysubtables=False, omitsubtables=[''])
ms.ismultims(self)
ms.split(self, outputms='', field='', spw='*', step=[1], baseline='', timebin='-1s', time='', scan='', uvrange='', taql='', whichcol='DATA', tileshape='', subarray='', combine='', correlation='', intent='', obs='')
ms.partition(self, outputms='', field='', spw='*', baseline='', timebin='-1s', time='', scan='', uvrange='', taql='', whichcol='DATA', tileshape='', subarray='', combine='', intent='', obs='')
ms.summary(self, verbose=False, listfile='', listunfl=False, cachesize=50, overwrite=False, wantreturn=True)
ms.getscansummary(self)
ms.getspectralwindowinfo(self)
ms.getreferencedtables(self)
ms.getfielddirmeas(self, dircolname='PHASE_DIR', fieldid=0, time=0, format='measure')
ms.listhistory(self)
ms.writehistory(self, message='', parms='', origin='MSHistoryHandler::addMessage()', msname='', app='ms')
ms.writehistory_batch(self, messages=[''], parms='', origin='MSHistoryHandler::addMessage()', msname='', app='ms')
ms.statistics(self, column='', complex_value='', useflags=True, useweights=False, spw='', field='', baseline='', uvrange='', time='', correlation='', scan='', intent='', array='', obs='', reportingaxes='', timeaverage=False, timebin='0s', timespan='', maxuvwdistance=0.0, doquantiles=True)
ms.statisticsold(self, column='', complex_value='', useflags=True, spw='', field='', baseline='', uvrange='', time='', correlation='', scan='', array='', obs='')
ms.range(self, items=[''], useflags=True, blocksize=10)
ms.lister(self, options='', datacolumn='data', field='', spw='', antenna='', timerange='', correlation='', scan='', feed='', array='', observation='', uvrange='', average='', showflags=False, msselect='', pagerows=50, listfile='')
ms.metadata(self, cachesize=50)
ms.msselect(self, items='', onlyparse=False)
ms.msselectedindices(self)
ms.msseltoindex(self, vis='', spw='', field='', baseline='', time='', scan='', uvrange='', observation='', polarization='', taql='')
ms.selectinit(self, datadescid=0, reset=False)
ms.select(self, items='')
ms.selecttaql(self, msselect='')
ms.selectchannel(self, nchan=1, start=0, width=1, inc=1)
ms.selectpolarization(self, wantedpol=[''])
ms.statwt(self, combine='', timebin='1', slidetimebin=False, chanbin='spw', minsamp=2, statalg='classic', fence=-1, center='mean', lside=True, zscore=-1, maxiter=-1, fitspw='', excludechans=False, wtrange=[''], preview=False, datacolumn='corrected')
ms.oldstatwt(self, dorms=False, byantenna=True, sepacs=True, fitspw='*', fitcorr='', combine='', timebin='0s', minsamp=3, field='', spw='*', antenna='', timerange='', scan='', intent='', array='', correlation='', obs='', datacolumn='corrected_data')
ms.regridspw(self, outframe='LSRK', mode='chan', restfreq=-3E30, interpolation='LINEAR', start=-3E30, center=-3E30, bandwidth=-1., chanwidth=-1., hanning=True)
ms.cvel(self, mode='channel', nchan=-1, start='0', width='1', interp='linear', phasec='', restfreq='1.4GHz', outframe='', veltype='radio', hanning=True)
ms.hanningsmooth(self, datacolumn='corrected')
ms.cvelfreqs(self, spwids=[0], fieldids=[0], obstime='', mode='channel', nchan=-1, start='0', width='1', phasec='', restfreq='1.4GHz', outframe='', veltype='radio', verbose=True)
ms.contsub(self, outputms='', fitspw='*', fitorder=1, combine='', spw='*', unionspw='*', field='', scan='', intent='', correlation='', obs='', whichcol='CORRECTED_DATA')
ms.continuumsub(self, field='', fitspw='', spw='', solint='int', fitorder=0, mode='subtract')
ms.uvsub(self, reverse=False)
ms.addephemeris(self, id=-1, ephemerisname='', comment='', field='')
ms.timesort(self, newmsname='')
ms.sort(self, newmsname='', columns=[''])
ms.iterinit(self, columns=[''], interval=0.0, maxrows=0, adddefaultsortcolumns=True)
ms.iterorigin(self)
ms.iternext(self)
ms.iterend(self)
ms.ngetdata(self, items=[''], ifraxis=False, ifraxisgap=0, increment=1, average=False)
ms.niterinit(self, columns=[''], interval=0.0, maxrows=0, adddefaultsortcolumns=True)
ms.niterorigin(self)
ms.niternext(self)
ms.niterend(self)
ms.nrowold(self, selected=False)
ms.rangeold(self, items=[''], useflags=True, blocksize=10)
ms.selectinitold(self, datadescid=0, reset=False)
ms.selectold(self, items='')
ms.selecttaqlold(self, msselect='')
ms.selectchannelold(self, nchan=1, start=0, width=1, inc=1)
ms.selectpolarizationold(self, wantedpol=[''])
ms.getdataold(self, items=[''], ifraxis=False, ifraxisgap=0, increment=1, average=False)
ms.putdataold(self, items='')
ms.iterinitold(self, columns=[''], interval=0.0, maxrows=0, adddefaultsortcolumns=True)
ms.iteroriginold(self)
ms.iternextold(self)
ms.iterendold(self)
ms.continuumsubold(self, field='', fitspw='', spw='', solint='int', fitorder=0, mode='subtract')
atmosphere.atmosphere(self)
atmosphere.close(self)
atmosphere.done(self)
atmosphere.getAtmVersion(self)
atmosphere.listAtmosphereTypes(self)
atmosphere.initAtmProfile(self, altitude=5000., temperature=270.0, pressure=560.0, maxAltitude=48.0, humidity=20.0, dTem_dh=-5.6, dP=10.0, dPm=1.2, h0=2.0, atmType=1, layerBoundaries=[''], layerTemperature=[''])
atmosphere.updateAtmProfile(self, altitude=5000., temperature=270.0, pressure=560.0, humidity=20.0, dTem_dh=-5.6, h0=2.0)
atmosphere.getBasicAtmParms(self)
atmosphere.getNumLayers(self)
atmosphere.getGroundWH2O(self)
atmosphere.getProfile(self)
atmosphere.initSpectralWindow(self, nbands=1, fCenter=90, fWidth=0.64, fRes=0.0)
atmosphere.addSpectralWindow(self, fCenter=350, fWidth=0.008, fRes=0.002)
atmosphere.getNumSpectralWindows(self)
atmosphere.getNumChan(self, spwid=0)
atmosphere.getRefChan(self, spwid=0)
atmosphere.getRefFreq(self, spwid=0)
atmosphere.getChanSep(self, spwid=0)
atmosphere.getChanFreq(self, chanNum=0, spwid=0)
atmosphere.getSpectralWindow(self, spwid=0)
atmosphere.getChanNum(self, freq='', spwid=0)
atmosphere.getBandwidth(self, spwid=0)
atmosphere.getMinFreq(self, spwid=0)
atmosphere.getMaxFreq(self, spwid=0)
atmosphere.getDryOpacity(self, nc=-1, spwid=0)
atmosphere.getDryContOpacity(self, nc=-1, spwid=0)
atmosphere.getO2LinesOpacity(self, nc=-1, spwid=0)
atmosphere.getO3LinesOpacity(self, nc=-1, spwid=0)
atmosphere.getCOLinesOpacity(self, nc=-1, spwid=0)
atmosphere.getN2OLinesOpacity(self, nc=-1, spwid=0)
atmosphere.getWetOpacity(self, nc=-1, spwid=0)
atmosphere.getH2OLinesOpacity(self, nc=-1, spwid=0)
atmosphere.getH2OContOpacity(self, nc=-1, spwid=0)
atmosphere.getDryOpacitySpec(self, spwid=0)
atmosphere.getWetOpacitySpec(self, spwid=0)
atmosphere.getDispersivePhaseDelay(self, nc=-1, spwid=0)
atmosphere.getDispersiveWetPhaseDelay(self, nc=-1, spwid=0)
atmosphere.getNonDispersiveWetPhaseDelay(self, nc=-1, spwid=0)
atmosphere.getNonDispersiveDryPhaseDelay(self, nc=-1, spwid=0)
atmosphere.getNonDispersivePhaseDelay(self, nc=-1, spwid=0)
atmosphere.getDispersivePathLength(self, nc=-1, spwid=0)
atmosphere.getDispersiveWetPathLength(self, nc=-1, spwid=0)
atmosphere.getNonDispersiveWetPathLength(self, nc=-1, spwid=0)
atmosphere.getNonDispersiveDryPathLength(self, nc=-1, spwid=0)
atmosphere.getO2LinesPathLength(self, nc=-1, spwid=0)
atmosphere.getO3LinesPathLength(self, nc=-1, spwid=0)
atmosphere.getCOLinesPathLength(self, nc=-1, spwid=0)
atmosphere.getN2OLinesPathLength(self, nc=-1, spwid=0)
atmosphere.getNonDispersivePathLength(self, nc=-1, spwid=0)
atmosphere.getAbsH2OLines(self, nl='', nf=0, spwid=0)
atmosphere.getAbsH2OCont(self, nl='', nf=0, spwid=0)
atmosphere.getAbsO2Lines(self, nl='', nf=0, spwid=0)
atmosphere.getAbsDryCont(self, nl='', nf=0, spwid=0)
atmosphere.getAbsO3Lines(self, nl='', nf=0, spwid=0)
atmosphere.getAbsCOLines(self, nl='', nf=0, spwid=0)
atmosphere.getAbsN2OLines(self, nl='', nf=0, spwid=0)
atmosphere.getAbsTotalDry(self, nl='', nf=0, spwid=0)
atmosphere.getAbsTotalWet(self, nl='', nf=0, spwid=0)
atmosphere.setUserWH2O(self, wh2o=0.0)
atmosphere.getUserWH2O(self)
atmosphere.setAirMass(self, airmass='')
atmosphere.getAirMass(self)
atmosphere.setSkyBackgroundTemperature(self, tbgr=2.73)
atmosphere.getSkyBackgroundTemperature(self)
atmosphere.getAverageTebbSky(self, spwid=0, wh2o=-1)
atmosphere.getTebbSky(self, nc=-1, spwid=0, wh2o=-1)
atmosphere.getTebbSkySpec(self, spwid=0, wh2o=-1)
atmosphere.getAverageTrjSky(self, spwid=0, wh2o=-1)
atmosphere.getTrjSky(self, nc=-1, spwid=0, wh2o=-1)
atmosphere.getTrjSkySpec(self, spwid=0, wh2o=-1)
synthesismaskhandler.synthesismaskhandler(self)
synthesismaskhandler.pruneregions(self, inmaskname='', prunesize=0.0, chanflag=[''], outmaskname='')
synthesismaskhandler.done(self)
singledishms.singledishms(self)
singledishms.open(self, )
singledishms.close(self)
singledishms.done(self)
singledishms.name(self)
singledishms.subtract_baseline(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', blfunc='poly', order=5, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0])
singledishms.subtract_baseline_cspline(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', npiece=5, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0])
singledishms.subtract_baseline_sinusoid(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', addwn='0', rejwn='', applyfft=False, fftmethod='fft', fftthresh='3.0', clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0])
singledishms.subtract_baseline_variable(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw='', updateweight=False, sigmavalue='stddev', verbose=False)
singledishms.apply_baseline_table(self, bltable='', datacolumn='data', spw='', updateweight=False, sigmavalue='stddev', outfile='')
singledishms.fit_line(self, datacolumn='data', spw='', pol='', timebin='', timespan='', polaverage='', fitfunc='gaussian', nfit='0', linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=[0, 0], tempfile='', tempoutfile='')
singledishms.set_selection(self, spw='', field='', antenna='', timerange='', scan='', observation='', polarization='', beam='', intent='', taql='', reindex=True)
singledishms.smooth(self, type='gaussian', width=0.0, datacolumn='data', outfile='')
singledishms.importasap(self, infile='', outfile='', parallel=False)
singledishms.importnro(self, infile='', outfile='', parallel=False)
msmetadata.msmetadata(self)
msmetadata.almaspws(self, chavg=False, fdm=False, sqld=False, tdm=False, wvr=False, complement=False)
msmetadata.antennadiameter(self, antenna='-1')
msmetadata.antennaids(self, name='', mindiameter='0m', maxdiameter='1pc', obsid=-1)
msmetadata.antennanames(self, antennaids=-1)
msmetadata.antennaoffset(self, which='0')
msmetadata.antennaposition(self, which='0')
msmetadata.antennastations(self, which='-1', obsid=-1)
msmetadata.antennasforscan(self, scan=-1, obsid=-1, arrayid=-1)
msmetadata.bandwidths(self, spw=-1)
msmetadata.baseband(self, spw='')
msmetadata.baselines(self)
msmetadata.chanavgspws(self)
msmetadata.chaneffbws(self, spw='', unit='', asvel=False)
msmetadata.chanfreqs(self, spw='', unit='Hz')
msmetadata.chanres(self, spw='', unit='', asvel=False)
msmetadata.chanwidths(self, spw='', unit='Hz')
msmetadata.close(self)
msmetadata.corrprodsforpol(self, pol=-1)
msmetadata.corrtypesforpol(self, pol=-1)
msmetadata.datadescids(self, spw=-1, pol=-1)
msmetadata.done(self)
msmetadata.effexposuretime(self)
msmetadata.exposuretime(self, scan=0, spwid=0, polid=-1, obsid=0, arrayid=0)
msmetadata.fdmspws(self)
msmetadata.fieldnames(self)
msmetadata.fieldsforintent(self, intent='', asnames=False)
msmetadata.fieldsforname(self, name='')
msmetadata.fieldsforscan(self, scan=-1, asnames=False, obsid=-1, arrayid=-1)
msmetadata.fieldsforscans(self, scans=[''], asnames=False, obsid=-1, arrayid=-1, asmap=False)
msmetadata.fieldsforsource(self, source=-1, asnames=False)
msmetadata.fieldsforsources(self, asnames=False)
msmetadata.fieldsforspw(self, spw=-1, asnames=False)
msmetadata.fieldsfortimes(self, time=-1, tol=0)
msmetadata.intents(self)
msmetadata.intentsforfield(self, field='-1')
msmetadata.intentsforscan(self, scan=-1, obsid=-1, arrayid=-1)
msmetadata.intentsforspw(self, spw=-1)
msmetadata.meanfreq(self, spw='', unit='Hz')
msmetadata.name(self)
msmetadata.namesforfields(self, fieldids='')
msmetadata.namesforspws(self, spwids='')
msmetadata.nantennas(self)
msmetadata.narrays(self)
msmetadata.nbaselines(self, ac=False)
msmetadata.nchan(self, spw='')
msmetadata.ncorrforpol(self, polid=-1)
msmetadata.nfields(self)
msmetadata.nobservations(self)
msmetadata.nspw(self, includewvr=True)
msmetadata.nstates(self)
msmetadata.nscans(self)
msmetadata.nsources(self)
msmetadata.nrows(self, autoc=True, flagged=True)
msmetadata.observers(self)
msmetadata.observatorynames(self)
msmetadata.observatoryposition(self, which=0)
msmetadata.open(self, msfile='', maxcache=50)
msmetadata.phasecenter(self, fieldid=0, epoch='')
msmetadata.pointingdirection(self, rownum=0, interpolate=False, initialrow=0)
msmetadata.polidfordatadesc(self, ddid=-1)
msmetadata.projects(self)
msmetadata.propermotions(self)
msmetadata.refdir(self, field='0', epoch='')
msmetadata.reffreq(self, spw=-1)
msmetadata.restfreqs(self, sourceid=0, spw=0)
msmetadata.scannumbers(self, obsid=-1, arrayid=-1)
msmetadata.scansforfield(self, field='', obsid=-1, arrayid=-1)
msmetadata.scansforfields(self, obsid=0, arrayid=0)
msmetadata.scansforintent(self, intent='', obsid=-1, arrayid=-1)
msmetadata.scansforspw(self, spw=-1, obsid=-1, arrayid=-1)
msmetadata.scansforspws(self, obsid=0, arrayid=0)
msmetadata.scansforstate(self, state=-1, obsid=-1, arrayid=-1)
msmetadata.scansfortimes(self, time=-1, tol=0, obsid=-1, arrayid=-1)
msmetadata.schedule(self, obsid=-1)
msmetadata.sideband(self, spw='')
msmetadata.sourcedirs(self)
msmetadata.sourcetimes(self)
msmetadata.sourceidforfield(self, field=-1)
msmetadata.sourceidsfromsourcetable(self)
msmetadata.sourcenames(self)
msmetadata.spwsforbaseband(self, baseband=-1, sqldmode='include')
msmetadata.spwfordatadesc(self, ddid=-1)
msmetadata.spwsforfield(self, field='')
msmetadata.spwsforfields(self)
msmetadata.spwsforintent(self, intent='')
msmetadata.spwsfornames(self, spwids='')
msmetadata.spwsforscan(self, scan=-1, obsid=-1, arrayid=-1)
msmetadata.spwsforscans(self, obsid=0, arrayid=0)
msmetadata.statesforscan(self, scan=-1, obsid=-1, arrayid=-1)
msmetadata.statesforscans(self, obsid=0, arrayid=0)
msmetadata.summary(self)
msmetadata.tdmspws(self)
msmetadata.timerangeforobs(self, obsid=-1)
msmetadata.timesforfield(self, field=-1)
msmetadata.timesforintent(self, intent='')
msmetadata.timesforscan(self, scan=-1, obsid=-1, arrayid=-1, perspw=False)
msmetadata.timesforscans(self, scans=-1, obsid=-1, arrayid=-1)
msmetadata.timesforspws(self, spw=-1)
msmetadata.transitions(self, sourceid=0, spw=0)
msmetadata.wvrspws(self, complement=False)
