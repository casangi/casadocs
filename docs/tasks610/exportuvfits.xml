<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="exportuvfits" category="import/export">
<shortdescription>Convert a CASA visibility data set to a UVFITS file:</shortdescription>
<description>
 This task writes a UVFITS file, a general format data set used to
 transfer data between different software systems. It is written in
 floating point format.  Different programs have different
 restrictions on what forms of UVFITS files they will use, especially
 whether they will accept multiple sources and/or spectral windows in
 the same file.  See the spw, multisource, and combinespw descriptions
 below.

IMPORTANT NOTE: In general, some of the data averaging features of
this task have never worked properly. In general, users should run
mstransform to select and average data prior to running
exportuvfits. The associated input parameters are being slowly
deprecated and removed.
</description>
<input>
        <param type="string" name="vis" mustexist="true">
<shortdescription>Name of input visibility file</shortdescription>
<description>Name of input visibility file
                     Default: none

                        Example: vis='ngc5921.ms'
</description>
                <value></value>
        </param>

        <param type="string" name="fitsfile">
<shortdescription>Name of output UV FITS file</shortdescription>
<description>Name of output UV FITS file
                     Default: none

                        Example: vis='ngc5921XC1.fits'
</description>
                <value></value>
        </param>

        <param type="string" name="datacolumn">
<shortdescription>Visibility file data column</shortdescription>
<description>Visibility file data column
                     Default: corrected
                     Options: 'data'(raw)|'corrected'|'model'|'weight'

                        Example: datacolumn='model'
</description>
                <value>corrected</value>
                <allowed kind="enum">
                        <value>data</value>
                        <value>corrected</value>
                        <value>model</value>
                        <value>weight</value>
                </allowed>
        </param>

        <param type="any" name="field">
<shortdescription>Select field using field id(s) or field name(s)</shortdescription>
<description>Select field using field id(s) or field name(s)
                     Default: '' --> all fields
                     
                     Use 'go listobs' to obtain the list id's or
                     names. If field string is a non-negative integer,
                     it is assumed a field index,  otherwise, it is
                     assumed a field name.

                        Examples:
                        field='0~2'; field ids 0,1,2
                        field='0,4,5~7'; field ids 0,4,5,6,7
                        field='3C286,3C295'; field named 3C286 and
                        3C295
                        field = '3,4C*'; field id 3, all names
                        starting with 4C
</description>
                <any type="variant" limittypes="string stringArray int intArray"/>
                <value type="string"></value>
        </param>


        <param type="string" name="spw">
<shortdescription>Select spectral window/channels</shortdescription>
<description>Select spectral window/channels

                        Examples:
                        spw='0~2,4'; spectral windows 0,1,2,4 (all
                        channels)
                        spw='&lt;2';  spectral windows less than 2
                        (i.e. 0,1)
                        spw='0:5~61'; spw 0, channels 5 to 61,
                        INCLUSIVE
                        spw='*:5~61'; all spw with channels 5 to 61
                        spw='0,10,3:3~45'; spw 0,10 all channels, spw
                        3, channels 3 to 45.
                        spw='0~2:2~6'; spw 0,1,2 with channels 2
                        through 6 in each.
                        spw='0:0~10;15~60'; spectral window 0 with
                        channels 0-10,15-60. (NOTE ';' to separate
                        channel selections)
                        spw='0:0~10^2,1:20~30^5'; spw 0, channels
                        0,2,4,6,8,10, spw 1, channels 20,25,30 
                        type 'help par.selection' for more examples.
</description>
                <value></value>
        </param>

        <param type="string" name="antenna" >
<shortdescription>Select data based on antenna/baseline</shortdescription>
<description>Select data based on antenna/baseline
                     Subparameter of selectdata=True
                     Default: '' (all)

                     If antenna string is a non-negative integer, it
                     is assumed an antenna index, otherwise, it is
                     assumed as an antenna name
  
                         Examples: 
                         antenna='5&amp;6'; baseline between antenna
                         index 5 and index 6.
                         antenna='VA05&amp;VA06'; baseline between VLA
                         antenna 5 and 6.
                         antenna='5&amp;6;7&amp;8'; baselines with
                         indices 5-6 and 7-8
                         antenna='5'; all baselines with antenna index
                         5
                         antenna='05'; all baselines with antenna
                         number 05 (VLA old name)
                         antenna='5,6,10'; all baselines with antennas
                         5,6,10 index numbers
</description>
                <value></value>
        </param>

        <param type="string" name="timerange" >
<shortdescription>Select data based on time range</shortdescription>
<description>Select data based on time range
                     Subparameter of selectdata=True
                     Default = '' (all)

                        Examples:
                        timerange =
                        'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                        (Note: if YYYY/MM/DD is missing date defaults
                        to first day in data set.)
                        timerange='09:14:0~09:54:0' picks 40 min on
                        first day 
                        timerange= '25:00:00~27:30:00' picks 1 hr to 3
                        hr 30min on NEXT day
                        timerange='09:44:00' pick data within one
                        integration of time
                        timerange='>10:24:00' data after this time
</description>
                <value></value>
        </param>

        <param type="bool" name="writesyscal">
<shortdescription>Write GC and TY tables (not yet available)</shortdescription>
<description>Write GC and TY tables. Not yet available.
                     Default: False
</description>
                <value>False</value>
        </param>

        <param type="bool" name="multisource">
<shortdescription>Write in multi-source format?</shortdescription>
<description>Write in multi-source format? 
                     Default: True

                     Set to False if only one source is selected. 

                     Note: diffmap does not work on multisource uvfits
                     files, so if planning on using diffmap on the
                     resulting uvfits file, select a single source and
                     set multisource = False. Otherwise use True. (If
                     multiple sources are selected, a multi-source
                     file will be written no matter what the setting
                     of this parameter).
</description>
                <value>True</value>
        </param>

        <param type="bool" name="combinespw">
<shortdescription>Export the spectral windows as IFs</shortdescription>
<description>Export the spectral windows as IFs?
                     Default: True

                     If True, export the spectral windows as
                     IFs. All spectral windows must have same
                     shape. Otherwise multiple windows will use
                     multiple FREQIDs.
</description>
                <value>True</value>
        </param>

        <param type="bool" name="writestation">
<shortdescription>Write station name instead of antenna name</shortdescription>
<description>Write station name instead of antenna name
                     Default: True
</description>
                <value>True</value>
        </param>

        <param type="bool" name="padwithflags" subparam="true">
<shortdescription>Fill in missing data with flags to fit IFs</shortdescription>
<description>Fill in missing data with flags to fit IFs
                     Subparameter of combinespw=True
                     Default: True
                     
                     If True, and combinespw is True, fill in missing
                     data as needed to fit the IF structure. This is
                     appropriate if the MS had a few
                     frequency-dependent flags applied, and was then
                     time-averaged by split, or when exporting for use
                     by difmap. If the spectral windows were observed
                     at different times, padwithflags=True will add a
                     large number of flags, making the output file
                     significantly longer. It does not yet support
                     spectral windows with different widths.
</description>
                <value>False</value>
        </param>
    <param type="bool" name="overwrite">
<shortdescription>Overwrite output file if it exists?</shortdescription>
 <description>Overwrite output file if it exists?
                     Default: False
                     Options: False|True
</description>
        <value>False</value>
    </param>
    <constraints>
          <when param="combinespw">
            <equals type="bool" value="True">
              <default param="padwithflags"><value type="bool">True</value> </default>
            </equals>
            <equals type="bool" value="False"/>
          </when>
    </constraints>
</input>
<example>

For more information, see the task pages of exportuvfits in CASA Docs:

https://casa.nrao.edu/casadocs/

</example> 

<returns type="void"/>
</task>
</casaxml>
