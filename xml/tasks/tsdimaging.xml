<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">




<task visibility="experimental" name="tsdimaging" category="single dish" startup="true" type="function">

  <shortdescription>SD task: imaging for total power and spectral data</shortdescription>

  <description>
Task sdimaging creates an image from input single-dish data sets.
The input can be either total power and spectral data. 

The coordinate of output image is defined by four axes, i.e., two
spatial axes, frequency and polarization axes.\n
By default, spatial coordinate of image is defined so that the all
pointing directions in POINTING tables of input data sets are covered
with the cell size, 1/3 of FWHM of primary beam of antennas in the
first MS. Therefore, it is often easiest to leave spatial definitions
at the default values. It is also possible to define spatial axes of
the image by specifying the image center direction (phasecenter),
number of image pixel (imsize) and size of the pixel (cell).\n
The frequency coordinate of image is defined by three parameters,
the number of channels (nchan), the channel id/frequency/velocity of
the first channel (start), and channel width (width).There are three
modes available to define unit of start and width, i.e., 'channel' (use
channel indices), 'frequency' (use frequency unit, e.g., 'GHz'),
and 'velocity' (use velocity unit, e.g., 'km/s'). By default, nchan,
start, and width are defined so that all selected spectral windows are
covered with the channel width equal to separation of first two
channels selected.\n
Finally, polarizations of image is defined by stokes parameter or
polarization. For example, stokes='XXYY' produces an image cube with
each plane contains the image of one of the polarizations, while
stokes='I' produces a 'total intensity' or Stokes I image.
The stokes parameter has a special option, 'pseudoI'. The option is 
introduced to support imaging of partially flagged correlations. 
Main difference between 'I' and 'pseudoI' is that the former only takes 
into account the data whose correlations are all valid (this is the 
Stokes I in the strict sense) while the latter accumulates partially 
flagged data in addition. Note that the 'pseudoI' option is compatible 
with 'I' for sdimaging task. 

The task also supports various grid function (convolution kernel) to
weight spectra as well as an option to remove the most extreme minimum 
and maximum (unweighted) values prior to computing the gridded pixel 
values. See description below for details of gridfunction available.

  </description>

  <input>
    <param mustexist="true" name="infiles" type="stringArray"><shortdescription>a list of names of input SD Measurementsets (only MS is allowed for this task)</shortdescription><description>a list of names of input SD Measurementsets (only MS is allowed for this task)</description>
            
            <value/>
    </param>

    <param name="outfile" type="string"><shortdescription>prefix of output images (.image, .weight, .sumwt, .psf)</shortdescription><description>prefix of output images (.image, .weight, .sumwt, .psf)</description>
            
            <value/>
    </param>

    <param name="overwrite" type="bool">
            <shortdescription>overwrite the output file if already exists [True, False]</shortdescription>
            <description>overwrite the output file if already exists [True, False]</description>
            <value>False</value>
    </param>

    <param name="field" type="any"><shortdescription>select data by field IDs and names, e.g. \'3C2*\' (\'\'=all)</shortdescription><description>select data by field IDs and names, e.g. \'3C2*\' (\'\'=all)</description>
            
            <any limittypes="string stringArray" type="variant"/>
            <value type="string"/>
    </param>

    <param name="spw" type="any"><shortdescription>select data by IF IDs (spectral windows), e.g. \'3,5,7\' (\'\'=all)</shortdescription><description>select data by IF IDs (spectral windows), e.g. \'3,5,7\' (\'\'=all)</description>
            
            <any limittypes="string stringArray" type="variant"/>
            <value type="string"/>
    </param>

    <param name="antenna" type="any"><shortdescription>select data by antenna names or IDs, e.g, \'PM03\' (\'\' = all antennas)</shortdescription><description>select data by antenna names or IDs, e.g, \'PM03\' (\'\' = all antennas)</description>
            
            <any limittypes="string stringArray" type="variant"/>
            <value type="string"/>
    </param>

    <param name="scan" type="any"><shortdescription>select data by scan numbers, e.g. \'21~23\' (\'\'=all)</shortdescription><description>select data by scan numbers, e.g. \'21~23\' (\'\'=all)</description>
            
            <any limittypes="string stringArray" type="variant"/>
            <value type="string"/>
    </param>
    
    <param name="intent" type="any"><shortdescription>select data by observational intent, e.g. \'*ON_SOURCE*\' (\'\'=all)</shortdescription><description>select data by observational intent, e.g. \'*ON_SOURCE*\' (\'\'=all)</description>
            
            <any limittypes="string stringArray" type="variant"/>
            <value type="string">OBSERVE_TARGET#ON_SOURCE</value>
    </param>

    <param name="mode" type="string">
            <description>spectral gridding type</description>
            <shortdescription>spectral gridding type [\'channel\', \'frequency\', \'velocity\']</shortdescription>
            <value>channel</value> 
            <allowed kind="enum">
                    <value>channel</value>
                    <value>frequency</value>
                    <value>velocity</value>
           </allowed>
    </param>

    <param subparam="true" name="nchan" type="int"><shortdescription> number of channels (planes) in output image (-1=all)</shortdescription><description> number of channels (planes) in output image (-1=all)</description>
            
            <value>-1</value>
    </param>

    <param subparam="true" name="start" type="any"><shortdescription>start of output spectral dimension, e.g. \'0\', \'110GHz\', \'-20km/s\'</shortdescription><description>start of output spectral dimension, e.g. \'0\', \'110GHz\', \'-20km/s\'</description>
            
            <any limittypes="string int" type="variant"/>
            <value type="int">0</value>
    </param>

    <param subparam="true" name="width" type="any"><shortdescription>width of output spectral channels</shortdescription><description>width of output spectral channels</description>
            
            <any limittypes="string int" type="variant"/>
            <value type="int">1</value>
    </param>

    <param subparam="true" name="veltype" type="string">
            <shortdescription>velocity definition [\'radio\', \'optical\', \'true\' or \'relativistic\'] </shortdescription>
            <description>velocity definition</description>
            <value>radio</value>
            <allowed kind="enum">
                    <value>radio</value>
                    <value>optical</value>
                    <value>true</value>
                    <value>relativistic</value>
                    <value>RADIO</value>
                    <value>OPTICAL</value>
                    <value>TRUE</value>
                    <value>RELATIVISTIC</value>
           </allowed>
    </param>

    <param name="specmode" type="string">
        <shortdescription>Spectral definition mode (cube, cubedata, cubesource)</shortdescription>
        <description>Spectral definition mode (cube, cubedata, cubesource)</description>
        <value>cube</value>
        <allowed kind="enum">
            <value>cube</value>
            <value>cubedata</value>
            <value>cubesource</value>
        </allowed>
    </param>

    <param type="string" name="outframe" subparam="true">
            <shortdescription>velocity frame of output image [\'lsrk\', \'lsrd\', \'bary\', \'geo\', \'topo\', \'galacto\', \'lgroup\', \'cmb\'] (\'\'=current frame or LSRK for multiple-MS inputs) </shortdescription>
            <description>velocity frame of output image (''=current frame or LSRK for multiple-MS inputs)</description>
            <value></value>
            <allowed kind="enum" ignorecase="true">
                    <value>lsrk</value>
                    <value>lsrd</value>
                    <value>bary</value>
                    <value>geo</value>
                    <value>topo</value>
                    <value>galacto</value>
                    <value>lgroup</value>
                    <value>cmb</value>
                    <value>LSRK</value>
                    <value>LSRD</value>
                    <value>BARY</value>
                    <value>GEO</value>
                    <value>TOPO</value>
                    <value>GALACTO</value>
                    <value>LGROUP</value>
                    <value>CMB</value>
                    <value/>
           </allowed>
    </param>

    <param name="gridfunction" type="string">
            <shortdescription>gridding function for imaging [\'BOX\', \'SF\', \'PB\', \'GAUSS\' or \'GJINC\'] (see description in help)</shortdescription>
            <description>gridding function for imaging (see description in help)</description>
            <value>BOX</value>
            <allowed kind="enum">
                <value>BOX</value>
                <value>PB</value>
                <value>SF</value>
                <value>GAUSS</value>
                <value>GJINC</value>
                <value>box</value>
                <value>pb</value>
                <value>sf</value>
                <value>gauss</value>
                <value>gjinc</value>
            </allowed>
    </param>

    <param subparam="true" name="convsupport" type="int"><shortdescription>convolution support for gridding</shortdescription><description>convolution support for gridding</description>
            
            <value>-1</value>
    </param>

    <param subparam="true" name="truncate" type="any"><shortdescription>truncation radius for gridding</shortdescription><description>truncation radius for gridding</description>
            
            <any limittypes="string int double" type="variant"/>
            <value type="int">-1</value>
    </param>

    <param subparam="true" name="gwidth" type="any"><shortdescription>HWHM for gaussian</shortdescription><description>HWHM for gaussian</description>
            
            <any limittypes="string int double" type="variant"/>
            <value type="int">-1</value>
    </param>

    <param subparam="true" name="jwidth" type="any"><shortdescription>c-parameter for jinc function</shortdescription><description>c-parameter for jinc function</description>
            
            <any limittypes="string int double" type="variant"/>
            <value type="int">-1</value>
    </param>

    <param name="imsize" type="any"><shortdescription>x and y image size in pixels, e.g., [64,64]. Single value: same for both spatial axes ([] = number of pixels to cover whole pointings in MSes)</shortdescription><description>x and y image size in pixels, e.g., [64,64]. Single value: same for both spatial axes ([] = number of pixels to cover whole pointings in MSes)</description>
            
            <any limittypes="intArray doubleArray" type="variant"/>
            <value type="intArray"/>
    </param>

    <param name="cell" type="any"><shortdescription>x and y cell size, (e.g., [\'8arcsec\',\'8arcsec\']. default unit arcmin. ('' = 1/3 of FWHM of primary beam)</shortdescription><description>x and y cell size, (e.g., [\'8arcsec\',\'8arcsec\']. default unit arcmin. ('' = 1/3 of FWHM of primary beam)</description>
    
    <any limittypes="string stringArray doubleArray" type="variant"/>
    <value type="string"/>
    </param>

    <param name="phasecenter" type="any"><shortdescription>image center direction: position or field index or ephemeris source info, e.g., \'J2000 17:30:15.0 -25.30.00.0\', \'MARS\'. (\'\' = the center of pointing directions in MSes)</shortdescription><description>image center direction: position or field index or ephemeris source info, e.g., \'J2000 17:30:15.0 -25.30.00.0\', \'MARS\'. (\'\' = the center of pointing directions in MSes)</description>
            
            <any type="variant"/>
            <value type="string"/>
    </param>

        <param name="projection" type="string"><shortdescription>map projection type</shortdescription><description>map projection type</description>
            
            <value>SIN</value>
            <allowed kind="enum">
                <value>SIN</value>
                <value>CAR</value>
                <value>TAN</value>
                <value>SFL</value>
                <value>sin</value>
                <value>car</value>
                <value>tan</value>
                <value>sfl</value>
            </allowed>
        </param>

    <param name="pointingcolumn" type="string">
            <shortdescription>pointing data column to use [\'direction\', \'target\', \'pointing_offset\', \'source_offset\' or \'encoder\']</shortdescription>
            <description>pointing data column to use</description>
            <value>direction</value>
            <allowed kind="enum">
                <value>target</value>
                <value>pointing_offset</value>
                <value>source_offset</value>
                <value>encoder</value>
                <value>direction</value>
                <value>TARGET</value>
                <value>POINTING_OFFSET</value>
                <value>SOURCE_OFFSET</value>
                <value>ENCODER</value>
                <value>DIRECTION</value>
            </allowed>
    </param>

    <param name="restfreq" type="any"><shortdescription>rest frequency to assign to image, e.g., \'114.5GHz\'</shortdescription><description>rest frequency to assign to image, e.g., \'114.5GHz\'</description>
            
            <any limittypes="string double" type="variant"/>
            <value type="string"/>
    </param>

    <param name="stokes" type="string"><shortdescription>stokes parameters or polarization types to image, e.g. \'I\', \'XX\'</shortdescription><description>stokes parameters or polarization types to image, e.g. \'I\', \'XX\'</description>
            
            <value type="string">I</value>
            <allowed kind="enum">
            <value>I</value>
            <value>Q</value>
            <value>U</value>
            <value>V</value>
            <value>IV</value>
            <value>QU</value>
            <value>IQ</value>
            <value>UV</value>
            <value>IQUV</value>
            <value>RR</value>
            <value>LL</value>
            <value>XX</value>
            <value>YY</value>
            <value>RRLL</value>
            <value>XXYY</value>
            <value>pseudoI</value>
            </allowed>
    </param>

    <param name="minweight" type="double">
            <shortdescription>Minimum weight ratio to use</shortdescription>
            <description>Minimum weight ratio to the median of weight used in weight correction and weight beased masking</description>
            <allowed kind="range"> <value range="min">0</value> </allowed>
            <value>0.1</value>
    </param>
   
    <param name="brightnessunit" type="string"><shortdescription>Overwrite the brightness unit in image (\'\' = respect the unit in MS) [\'K\' or \'Jy/beam\']</shortdescription><description>Overwrite the brightness unit in image (\'\' = respect the unit in MS) [\'K\' or \'Jy/beam\']</description>
            
            <value/>
            <allowed kind="enum">
                <value/>
                <value>K</value>
                <value>Jy/beam</value>
            </allowed>
    </param>

        <param name="clipminmax" type="bool">
                        <shortdescription>Clip minimum and maximum value from each pixel</shortdescription>
                        <description>Clip minimum and maximum value from each pixel. Note the benefit of clipping is lost when the number of integrations contributing to each gridded pixel is small, or where the incidence of spurious datapoints is approximately or greater than the number of beams (in area) encompassed by expected image.</description>
                        <value>False</value>
        </param>

    <constraints>
            <when param="mode">
                <equals value="channel">
                    <default param="nchan"><value>-1</value></default>
                    <default param="start"><value type="string"/>
                        <description>Begin the output cube at the frequency of this channel in the MS</description>
                    </default>
                    <default param="width"><value type="string"/>
                        <description>Width of output channel relative to MS channel (# to average)(\'\' = 1 channel) </description>
                    </default>
                </equals>
                <equals value="frequency">
                    <default param="nchan"><value>-1</value></default>
                    <default param="start"><value type="string"/>
                        <description>Frequency of first channel: e.g. \'1.4GHz\' (\'\'= first channel in first SpW of MS)</description>
                    </default>
                    <default param="width"><value type="string"/>
                        <description>Channel width: e.g \'1.0kHz\'(\'\'=width of first channel in first SpW of MS)</description>
                    </default>
                </equals>
                <equals value="velocity">
                    <default param="nchan"><value>-1</value></default>
                    <default param="start"><value type="string"/>
                        <description>Velocity of first channel: e.g \'0.0km/s\'(\'\'=first channel in first SpW of MS)</description>
                    </default>
                    <default param="width"><value type="string"/>
                        <description>Channel width e.g \'-1.0km/s\' (\'\'=width of first channel in first SpW of MS)</description>
                    </default>
                    <default param="veltype"><value type="string">radio</value></default>
                </equals>
            </when>
            <when param="specmode">
                <equals value="cube" type="string">
                    <default param="outframe"><value type="string"/></default>
                </equals>
                <equals value="cubedata" type="string"/>
                <equals value="cubesource" type="string"/>
            </when>
            <when param="gridfunction">
                <equals value="BOX" type="string"/>
                <equals value="box" type="string"/>
                <equals value="SF" type="string">
                    <default param="convsupport"><value type="int">-1</value></default>
                </equals>
                <equals value="sf" type="string">
                    <default param="convsupport"><value type="int">-1</value></default>
                </equals>
                <equals value="PB" type="string"/>
                <equals value="pb" type="string"/>
                <equals value="GAUSS" type="string">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                </equals>
                <equals value="gauss" type="string">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                </equals>
                <equals value="GJINC" type="string">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                    <default param="jwidth"><value type="int">-1</value></default>
                </equals>
                <equals value="gjinc" type="string">
                    <default param="truncate"><value type="int">-1</value></default>
                    <default param="gwidth"><value type="int">-1</value></default>
                    <default param="jwidth"><value type="int">-1</value></default>
                </equals>
            </when>
    </constraints>
  </input>

  <returns type="void"/>

  <example>
Keyword arguments:
infiles -- a list of names of input SD Measurementsets
        example: 'm100.PM01.ms'
                 ['m100.PM01.ms','m100.PM03.ms']; multiple MSes
outfile -- prefix of output images
           Currently, four images are created by the task:
               .image -- target image
               .weight -- weight image
               .sumwt -- sumwt image
               .psf -- psf image (equivalent to weight image)
           .sumwt and .psf are kind of useless so far. image products 
           will be improved later.
        default: ''
        example: 'mySDimage.im'
overwrite -- overwrite the output file if already exists
        options: (bool) True,False
        default: False (do NOT overwrite)
        example: if True, existing file will be overwritten
field -- select data by field IDs and names
                If field string is a non-negative integer, it is assumed to
                be a field index otherwise, it is assumed to be a 
                field name
        default: '' (use all fields)
        example: field='3C2*' (all names starting with 3C2)
                 field='0,4,5~7' (field IDs 0,4,5,6,7)
                 field='0,3C273' (field ID 3 or filed named 3C273)
                 For multiple MS input, a list of field strings can be used:
                 field = ['0~2','0~4'] (field ids 0-2 for the first MS and 0-4
                         for the second) 
                 field = '0~2' (field ids 0-2 for all input MSes)
        this selection is in addition to the other selections to data
spw -- select data by spectral window IDs/channels
       NOTE: channels de-selected here will contain all zeros if
       selected by the parameter mode subparameters.    
        default: '' (use all IFs and channels)
        example: spw='3,5,7' (IF IDs 3,5,7; all channels)
                 spw='&lt;2' (IF IDs less than 2, i.e., 0,1; all channels)
                 spw='30~45GHz' (IF IDs with the center frequencies in range 30-45GHz; all channels)
                 spw='0:5~61' (IF ID 0; channels 5 to 61; all channels)
                 spw='3:10~20;50~60' (select multiple channel ranges within IF ID 3)
                 spw='3:10~20,4:0~30' (select different channel ranges for IF IDs 3 and 4)
                 spw='1~4;6:15~48' (for channels 15 through 48 for IF IDs 1,2,3,4 and 6)
                 For multiple MS input, a list of spw strings can be used:
                 spw=['0','0~3'] (spw ids 0 for the first MS and 0-3 for the second)
                 spw='0~3' (spw ids 0-3 for all input MSes)
        this selection is in addition to the other selections to data
antenna -- select data by antenna names or IDs
           If antenna string is a non-negative integer, it is 
           assumed to be an antenna index, otherwise, it is
           considered an antenna name.
        default: '' (all baselines, i.e. all antenna in case of auto data)
        example: antenna='PM03'
                 For multiple MS input, a list of antenna strings can be used:
                 antenna=['5','6'] (antenna id5 for the first MS and 6 for the second)
                 antenna='5' (antenna index 5 for all input MSes)
        this selection is in addition to the other selections to data
scan -- select data by scan numbers
        default: '' (use all scans)
        example: scan='21~23' (scan IDs 21,22,23)
                 For multiple MS input, a list of scan strings can be used:
                 scan=['0~100','10~200'] (scan ids 0-100 for the first MS
                 and 10-200 for the second)
                 scan='0~100 (scan ids 0-100 for all input MSes)
        this selection is in addition to the other selections to data
intent -- select data by observational intent, also referred to as 'scan intent'
        default: 'OBSERVE_TARGET#ON_SOURCE' (ALMA ON-source intent)
        example: intent='' (use all scan intents)
                 intent='*ON_SOURCE*' (any valid scan-intent expression accepted by the MSSelection module can be specified)
                 For multiple MS input, a list of scan-intent expressions can be used:
                 intent=['ON_SOURCE','CALIBRATE_BANDPASS'] (scan intent ON_SOURCE for the first MS
                 and CALIBRATE_BANDPASS for the second)
        this selection is in addition to the other selections to data
mode -- spectral gridding type
        options: 'channel', 'velocity', 'frequency'
        default: 'channel'
    &gt;&gt;&gt; mode expandable parameters
       nchan -- Total number of channels in the output image.
           default: -1; Automatically selects enough channels to cover 
                    data selected by 'spw' consistent with 'start' and 'width'.
                    It is often easiest to leave nchan at the default value. 
           example: nchan=100
       start -- First channel, velocity, or frequency. 
                For mode='channel'; This selects the channel index number 
                from the MS (0 based) that you want to correspond to the
                first channel of the output cube. The output cube will be
                in frequency space with the first channel having the
                frequency of the MS channel selected by start.  start=0
                refers to the first channel in the first selected spw, even
                if that channel is de-selected in the spw parameter.
                Channels de-selected by the spw parameter will be filled with
                zeros if included by the start parameter. For example,
                spw=3~8:3~100 and start=2 will produce a cube that starts on
                the third channel (recall 0 based) of spw index 3, and the
                first channel will be blank.
           default: '' (the first input channel of first input spw)
           example: start=100 (mode='channel')
                    start='22.3GHz' (mode='frequency')
                    start='5.0km/s' (mode='velocity')
       width -- Output channel width
               For mode='channel', default=1; width&gt;1 indicates channel averaging
               example: width=4.
               For mode= 'velocity' or 'frequency', default=''; width of
               first input channel, or more precisely, the difference 
               in frequencies between the first two selected channels. 
               -- For example if channels 1 and 3 are selected with spw, 
                then the default width will be the difference between their
                frequencies, and not the width of channel 1. 
               -- Similarly, if the selected data has uneven channel-spacing,
                 the default width will be picked from the first two selected
                 channels. In this case, please specify the desired width.
               When specifying the width, one must give units
               examples: width='1.0km/s', or width='24.2kHz'.
               Setting width&gt;0 gives channels of increasing frequency for 
               mode='frequency', and increasing velocity for mode='velocity'.
       veltype -- Velocity definition
           Options: 'radio','optical','true','relativistic'
           default: 'radio'
specmode -- Spectral definition mode (cube, cubedata, cubesource)
            default: 'cube'
            Options: 'cube', 'cubedata', 'cubesource'
                'cube' : Spectral line imaging with one or more channels
                         Parameters start, width,and nchan define the spectral
                         coordinate system and can be specified either in terms
                         of channel numbers, frequency or velocity in whatever
                         spectral frame is specified in 'outframe'.
                         All internal and output images are made with outframe as the
                         base spectral frame. However imaging code internally uses the fixed
                         spectral frame, LSRK for automatic internal software
                         Doppler tracking so that a spectral line observed over an
                         extended time range will line up appropriately.
                         Therefore the output images have additional spectral frame conversion
                         layer in LSRK on the top the base frame.
                'cubedata' : Spectral line imaging with one or more channels
                             There is no internal software Doppler tracking so
                             a spectral line observed over an extended time range
                             may be smeared out in frequency. There is strictly
                             no valid spectral frame with which to label the output
                             images, but they will list the frame defined in the MS                
                'cubesource': Spectral line imaging while
                              tracking moving source (near field or solar system
                              objects). The velocity of the source is accounted
                              and the frequency reported is in the source frame.
                              As there is not SOURCE frame defined,
                              the frame reported will be REST (as it may not be
                              in the rest frame emission region may be
                              moving w.r.t the systemic velocity frame)
outframe -- velocity reference frame of output image
        Options: '','LSRK','LSRD','BARY','GEO','TOPO','GALACTO',
                 'LGROUP','CMB'
        default: ''; same as input data or 'LSRK' for multiple-MS inputs
        example: frame='bary' for Barycentric frame 
gridfunction -- gridding function for imaging
        options: 'BOX' (Box-car), 'SF' (Spheroidal), 
                 'PB' (Primary-beam), 'GAUSS' (Gaussian),
                 'GJINC' (Gaussian*Jinc)
        default: 'BOX'
        example: 'SF'
    &gt;&gt;&gt; gridfunction expandable parameter:
       convsupport -- convolution support for 'SF' 
           default: -1 (use default for each gridfunction)
           example: 3
       truncate -- truncattion radius of convolution kernel.
                   effective only for 'GAUSS' and 'GJINC'.
           default: '-1' (use default for each gridfunction)
           example: 3, '20arcsec', '3pixel'
       gwidth -- HWHM for gaussian. Effective only for 
                 'GAUSS' and 'GJINC'.
           default: '-1' (use default for each gridfunction)
           example: 3, '20arcsec', '3pixel'
       jwidth -- Width of jinc function. Effective only for 
                 'GJINC'.
           default: '-1' (use default for each gridfunction)
           example: 3, '20arcsec', '3pixel'
imsize -- x and y image size in pixels, symmetric for single value
        default: [] (=cover all pointings in MS)
        example: imsize=200 (equivalent to [200,200])
cell -- x and y cell size. default unit arcmin
        default: '' (= 1/3 of FWHM of primary beam)
        example: cell=['0.2arcmin, 0.2arcmin']
                 cell='0.2arcmin' (equivalent to example above)
phasecenter -- image center: direction measure, field ID, or 
               ephemerides source information for moving source (solar system objects)
        default: '' (= the center of pointing directions in 
                     POINTING table of infiles)
        example: phasecenter=6 (field ID)
                 phasecenter='J2000 13h44m00 -17d02m00'
                 phasecenter='AZEL -123d48m29 15d41m41'
                 phasecenter='MARS'
                 phasecenter='myComet_ephem.tab'
                 phasecenter='TRACKFIELD'

        If the phasecenter is the name known major solar system object 
        ('MERCURY', 'VENUS', 'MARS', 'JUPITER', 'SATURN', 'URANUS', 
        'NEPTUNE', 'PLUTO', 'SUN', 'MOON') or is an ephemerides table 
        then that source is tracked and the background sources get smeared. 
        There is a special case, when phasecenter='TRACKFIELD', which 
        will use the ephemerides or polynomial phasecenter in the FIELD 
        table of the MS's as the source center to track. 

        When moving source correction is applied, the source is fixed to 
        the position at the beginning of on-source observations in the data. 
        Direction reference frame of output image refers phasecenter ('J2000' 
        if phasecenter is empty). 

        Caution: in case of specifying ephemeris table name, its name or path 
                 must not start with known major solar system object listed 
                 above (case-insensitive), otherwise, CASA will use its 
                 internal ephemeris data for phasecenter instead. In such case 
                 you need to add './' at the beginning so that the specified 
                 table will be used. For example, if you wish to explicitly 
                 specify ephemeris table attached to the input MS 'SunObs.ms', 
                 set phasecenter like './SunObs.ms/FIELD/ephemtab_name.tab'. 
                 
projection -- map projection type. See Calabretta &amp; Greisen (2002) for detail.
        default: 'SIN' 
        options: 'SIN', 'CAR', 'TAN', 'SFL'
pointingcolumn -- pointing data column to use
        option: 'direction', 'target', 'pointing_offset', 'source_offset', encoder' 
        default: 'direction'
restfreq -- specify rest frequency to use for output image
        default: '' (refer input data)
        example: 1.0e11, '100GHz'
stokes -- Stokes Planes to make
        default='I'; example: stokes='XXYY';
        options: 'I','Q','U','V','IV','QU','IQ','UV','IQUV','RR','LL','XX','YY','RRLL','XXYY','pseudoI' 
        Note : The 'pseudoI' option is a partial solution, allowing Stokes I imaging
               when either of the parallel-hand correlations are unflagged. 

minweight -- Minimum weight ratio to the median of weight used in 
             weight correction and weight based masking
        default: 0.1
        example: minweight = 0.
brightnessunit -- Overwrite the brightness unit in image.
        default: '' (use the unit in MS)
        Options: '', 'K' (Kelvin), 'Jy/beam'
clipminmax -- Clip minimum and maximum value from each pixel. 
              Note the benefit of clipping is lost when the number of 
              integrations contributing to each gridded pixel is small, 
              or where the incidence of spurious datapoints is 
              approximately or greater than the number of beams (in area) 
              encompassed by expected image.
        default: False
        option: True, False


-----------------
Gridding Kernel
-----------------
The parameter gridfunction sets gridding function (convolution kernel)
for imaging. Currently, the task supports 'BOX' (Box-car), 'SF' (Prolate
Spheroidal Wave Function), 'GAUSS' (Gaussian), 'GJINC' (Gaussian*Jinc),
where Jinc(x) = J_1(pi*x/c)/(pi*x/c) with a first order Bessel function
J_1, and 'PB' (Primary Beam). For 'PB', correct antenna informations
should be included in input file.

There are four subparameters for gridfunction: convsupport, truncate, 
gwidth, and jwidth. The convsupport is an integer specifying cut-off 
radius for 'SF' in units of pixel. By default (convsupport=-1), 
the cut-off radius is set to 3 pixels. The truncate is a cut-off 
radius for 'GAUSS' or 'GJINC'. It accepts integer, float, and 
string values of numeric plus unit. Allowed units are angular 
units such as 'deg', 'arcmin', 'arcsec', and 'pixel'. Default unit 
is 'pixel' so that string without unit or numerical values (integer 
or float) will be interpreted as radius in pixel. Default value 
for truncate, which is used when negative radius is set, is 3*HWHM 
for 'GAUSS' and radius at first null for 'GJINC'. The gwidth is 
the HWHM of gaussian for 'GAUSS' and 'GJINC'. Default value is 
sqrt(log(2)) pixel for 'GAUSS' and 2.52*sqrt(log(2)) pixel for 
'GJINC'. The jwidth specifies width of the jinc function (parameter 
'c' in the definition above). Default is 1.55 pixel. Both gwidth 
jwidth allows integer, float, or string of numeric plus unit. 
Default values for gwidth and jwidth are taken from Mangum et al. 
(2007). Formula for 'GAUSS' and 'GJINC' are taken from Table 1 in 
the paper, and are written as below using gwidth and jwidth: 

   GAUSS: exp[-log(2)*(|r|/gwidth)**2]

   GJINC: J_1(pi*|r|/jwidth)/(pi*|r|/jwidth)
             * exp[-log(2)*(|r|/gwidth)^2]  


Reference: Mangum, et al. 2007, A&amp;A, 474, 679-687 

--------------------
Mask in Output Image
--------------------
The parameter minweight defines a threshold of weight values 
to mask. The pixels in outfile whose weight is smaller than
minweight*median(weight) are masked out. The task also creates
a weight image with the name outfile.weight.

  </example>

</task>

</casaxml>
